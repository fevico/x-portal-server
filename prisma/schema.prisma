generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  firstname       String
  lastname        String
  othername       String?
  email           String    @unique
  phone           String?   @unique
  gender          Gender?
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime? @map("email_verified_at")
  password        String
  role            Role      @default(admin)
  rememberToken   String?
  avatar          Json?     @map("avatar")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  schoolId        String?   @map("school_id")
  school          School?   @relation(fields: [schoolId], references: [id])
  subRoleId       String?   @map("sub_role_id")
  subRole         SubRole?  @relation(fields: [subRoleId], references: [id])

  @@map("users")
}

model School {
  id             String        @id @default(uuid())
  name           String        @unique
  email          String        @unique
  contact        String        @unique
  isActive       Boolean       @default(true)
  address        String?
  subscriptionId String?       @map("subscription_id")
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  users          User[]
  subRoles       SubRole[]
  logo           Json?         @map("logo")

  @@map("schools")
}

model Permission {
  id          String              @id @default(uuid())
  name        String              @unique
  description String
  scope       PermissionScope     @default(school)
  subRoles    SubRolePermission[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  @@map("permissions")
}

model SubRole {
  id          String              @id @default(uuid())
  name        String
  schoolId    String              @map("school_id")
  school      School              @relation(fields: [schoolId], references: [id])
  description String?
  permissions SubRolePermission[]
  users       User[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  @@unique([name, schoolId]) // Ensure unique sub-role names per school @@map("sub_roles") 
}

model SubRolePermission {
  id           String     @id @default(uuid())
  subRoleId    String     @map("sub_role_id")
  permissionId String     @map("permission_id")
  subRole      SubRole    @relation(fields: [subRoleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([subRoleId, permissionId])
  @@map("sub_role_permissions")
}

model Subscription {
  id            String   @id @default(uuid())
  name          String   @unique
  student_limit Int?
  duration      Int
  schools       School[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

enum Gender {
  male
  female
}

enum Role {
  admin
  superAdmin
}

enum PermissionScope {
  platform
  school
}
