generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for common user data 
model User {
  id              String    @id @default(uuid())
  firstname       String?
  lastname        String?
  othername       String?
  username        String    @unique
  email           String?   @unique
  contact         String?   @unique
  gender          Gender?
  address         String?
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime? @map("email_verified_at")
  password        String
  isDeleted       Boolean   @default(false)

  plainPassword String
  role          Role     @default(admin) // System role: admin or superAdmin  rememberToken String?  @map("remember_token")
  avatar        Json?    @map("avatar")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by") // Added

  updatedBy  String?    @map("updated_by") // Added
  schoolSlug String?    @map("school_slug") // New: For multi-school support
  schoolId   String?    @map("school_id")
  school     School?    @relation(fields: [schoolId], references: [id])
  subRoleId  String?    @map("sub_role_id")
  subRole    SubRole?   @relation("UserRoles", fields: [subRoleId], references: [id])
  logEntries LogEntry[]
  staff      Staff?     @relation("UserToStaff")
  student    Student?   @relation("UserToStudent")
  parent     Parent?    @relation("UserToParent")

  @@index([schoolId, email])
  @@index([schoolId, username])
  @@map("users")
}

// School model 
model School {
  id                             String                          @id @default(uuid())
  name                           String                          @unique
  email                          String                          @unique
  slug                           String                          @unique
  contact                        String                          @unique
  isActive                       Boolean                         @default(true)
  isDeleted                      Boolean                         @default(false)
  address                        String?
  subscriptionId                 String?                         @map("subscription_id")
  subscription                   Subscription?                   @relation("SubscriptionSchools", fields: [subscriptionId], references: [id])
  subscriptionExpiresAt          DateTime?                       @map("subscription_expires_at")
  subscriptionStatus             Boolean?                        @default(false) @map("subscription_status")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  createdBy                      String?
  updatedBy                      String?
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  users                          User[]
  subRoles                       SubRole[]
  subRolePermissions             SubRolePermission[]
  classGradingSystems            ClassGradingSystem[]
  markingSchemes                 MarkingScheme[]
  markingSchemeComponents        MarkingSchemeComponent[]
  continuousAssessments          ContinuousAssessment[]
  continuousAssessmentComponents ContinuousAssessmentComponent[]
  gradingSystems                 GradingSystem[]
  grades                         Grade[]

  logEntries                        LogEntry[]
  classes                           Class[]
  classArms                         ClassArm[]
  subjects                          Subject[]
  invoices                          Invoice[]
  communication                     Communication[]
  admissions                        Admission[]
  sessions                          Session[]
  currentSessionId                  String?                            @map("current_session_id") // Track current session
  currentSession                    Session?                           @relation("SchoolCurrentSession", fields: [currentSessionId], references: [id])
  currentTermId                     String?                            @map("current_term_id") // Track current term
  currentTerm                       SessionTerm?                       @relation("SchoolCurrentTerm", fields: [currentTermId], references: [id])
  sessionClassAssignments           SessionClassAssignment[]
  classCategories                   ClassCategory[]
  attendanceRecords                 Attendance[]
  classAssignments                  StudentClassAssignment[]
  subscriptionPayments              SubscriptionPayment[]
  termDefinitions                   TermDefinition[] // Added: Links to term definitions 
  sessionTerms                      SessionTerm[] // Added: Links to term schedules 
  classTermMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[] // Added: Links to marking scheme assignments 
  teacherAssignments                TeacherSubjectAssignment[]
  classArmTeacherAssignments        ClassArmTeacherAssignment[]
  scoresAssignment                  StudentScoreAssignment[]
  termRecords                       StudentTermRecord[]                @relation("SchoolTermRecords")
  resultBatches                     ResultBatch[]
  studentResults                    StudentResult[]
  configuration                     Configuration?                     @relation("SchoolConfiguration") // One-to-one
  studentSubjectAssignments         StudentSubjectAssignment[]
  classArmSubjectAssignments        ClassArmSubjectAssignment[]
  reportSheetSettings               ReportSheetSetting[]

  @@index([email])
  @@map("schools")
}

// Staff model 
model Staff {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  user           User      @relation("UserToStaff", fields: [userId], references: [id])
  staffRegNo     String?   @unique @map("staff_reg_no") // School-assigned staff ID
  // department     String? // e.g., Mathematics, Administration
  // position       String? // e.g., Teacher, Head of Department
  hireDate       DateTime? @map("hire_date")
  qualifications Json? // e.g., B.Ed, M.Sc
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
  isDeleted      Boolean   @default(false) @map("is_deleted")


  updatedBy          String?                    @map("updated_by") // Added
  teacherAssignments TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]
  // @@index([userId, schoolId]) 

  @@map("staff")
}



// If you need to query a student’s “current” class and class arm, you can derive it from the StudentClassAssignment where sessionId matches the School.currentSessionId.
// Student 
model Student {
  id                String                     @id @default(uuid())
  userId            String                     @unique @map("user_id")
  user              User                       @relation("UserToStudent", fields: [userId], references: [id])
  studentRegNo      String?                    @unique @map("student_reg_no") // School-assigned student ID
  dateOfBirth       DateTime?                  @map("date_of_birth")
  religion          String? // New: For admission form
  nationality       String? // New: For admission form
  stateOfOrigin     String?                    @map("state_of_origin") // New: For admission form
  lga               String? // New: For admission form  
  parentId          String?                    @map("parent_id")
  parent            Parent?                    @relation(fields: [parentId], references: [id])
  classId           String?                    @map("class_id") // Added: Current class
  class             Class?                     @relation("StudentClass", fields: [classId], references: [id])
  classArmId        String?                    @map("class_arm_id") // Added: Current class arm
  classArm          ClassArm?                  @relation("ArmStudents", fields: [classArmId], references: [id])
  subjects          StudentSubjectAssignment[] // Updated relation name
  yearOfGraduation  DateTime?                  @map("year_of_graduation")
  admission         Admission?                 @relation("StudentToAdmission") // New: Link to admission
  admissionStatus   AdmissionStatus            @default(pending) @map("admission_status")
  admissionDate     DateTime?                  @map("admission_date") // Date of admission  createdAt         DateTime                   @default(now()) @map("created_at")
  isAlumni          Boolean                    @default(false) @map("is_alumni")
  isDeleted         Boolean                    @default(false) @map("is_deleted")
  updatedAt         DateTime                   @updatedAt @map("updated_at")
  createdBy         String?                    @map("created_by")
  updatedBy         String?                    @map("updated_by")
  attendanceRecords Attendance[]               @relation("StudentAttendance")
  classAssignments  StudentClassAssignment[]   @relation("StudentClassAssignment")
  invoices          Invoice[] // New: Links to invoices
  scores            StudentScoreAssignment[]
  termRecords       StudentTermRecord[]        @relation("StudentTermRecords")
  studentResults    StudentResult[]

  @@map("students")
}

// Parent model 
model Parent {
  id           String    @id @default(uuid())
  userId       String    @unique @map("user_id")
  user         User      @relation("UserToParent", fields: [userId], references: [id])
  occupation   String?
  relationship String? // e.g., Father, Mother, Guardian
  students     Student[] // Links to students they are responsible for
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy    String?   @map("created_by") // Added
  isDeleted   Boolean   @default(false) @map("is_deleted")

  updatedBy String?     @map("updated_by") // Added
  Admission Admission[]
  // @@index([userId]) 

  @@map("parents")
}

// Class model 
model Class {
  id                      String                             @id @default(uuid())
  name                    String
  schoolId                String                             @map("school_id")
  school                  School                             @relation(fields: [schoolId], references: [id])
  classCategoryId         String?                            @map("class_category_id")
  classCategory           ClassCategory?                     @relation(fields: [classCategoryId], references: [id])
  students                Student[]                          @relation("StudentClass")
  isDeleted               Boolean                            @default(false)
  isActive                Boolean                            @default(true)
  createdAt               DateTime                           @default(now()) @map("created_at")
  updatedAt               DateTime                           @updatedAt @map("updated_at")
  createdBy               String?                            @map("created_by")
  updatedBy               String?                            @map("updated_by")
  admissionsPresentClass  Admission[]                        @relation("PresentClass")
  admissionsClassToApply  Admission[]                        @relation("ClassToApply")
  admissionsAssignedClass Admission[]                        @relation("AssignedClass")
  invoices                Invoice[]
  sessionClassAssignments SessionClassAssignment[]
  classArmSubjects        ClassArmSubjectAssignment[]
  attendanceRecords       Attendance[]
  gradingSystems          ClassGradingSystem[]
  termAssignments         ClassTermMarkingSchemeAssignment[]
  teacherAssignments      TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]
  classAssignments        StudentClassAssignment[]
  scores                  StudentScoreAssignment[]
  termRecords             StudentTermRecord[]                @relation("ClassTermRecords")
  resultBatches           ResultBatch[]
  reportSheetSetting      ReportSheetSetting[]

  @@unique([name, schoolId])
  @@index([schoolId, classCategoryId])
  @@map("classes")
}

// ClassCategory model 
model ClassCategory {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")
  schoolId  String    @map("school_id")
  school    School    @relation(fields: [schoolId], references: [id])
  classes   Class[]

  @@index([schoolId])
  @@map("class_categories")
}

// ClassArm model 
model ClassArm {
  id                         String                      @id @default(uuid())
  name                       String
  schoolId                   String                      @map("school_id")
  school                     School                      @relation(fields: [schoolId], references: [id])
  isDeleted                  Boolean                     @default(false)
  isActive                   Boolean                     @default(true)
  students                   Student[]                   @relation("ArmStudents")
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  createdBy                  String?                     @map("created_by")
  updatedBy                  String?                     @map("updated_by")
  admissionsAssignedClassArm Admission[]                 @relation("AssignedClassArm")
  sessionClassAssignments    SessionClassAssignment[]
  classArmSubjects           ClassArmSubjectAssignment[]
  attendanceRecords          Attendance[]
  invoices                   Invoice[]
  teacherAssignments         TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]
  classAssignments           StudentClassAssignment[]
  scores                     StudentScoreAssignment[]
  termRecords                StudentTermRecord[]         @relation("ClassArmTermRecords")
  resultBatches              ResultBatch[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("class_arms")
}

// AdmissionRecord model 
model Admission {
  id                 String    @id @default(uuid())
  sessionId          String    @map("session_id")
  session            Session   @relation("SessionAdmissions", fields: [sessionId], references: [id])
  schoolId           String    @map("school_id")
  school             School    @relation(fields: [schoolId], references: [id])
  studentId          String    @unique @map("student_id")
  student            Student   @relation("StudentToAdmission", fields: [studentId], references: [id])
  parentId           String?   @map("parent_id")
  parent             Parent?   @relation(fields: [parentId], references: [id])
  presentClassId     String?   @map("present_class_id")
  presentClass       Class?    @relation("PresentClass", fields: [presentClassId], references: [id])
  classApplyingTo    String?   @map("class_applying_to")
  classToApply       Class?    @relation("ClassToApply", fields: [classApplyingTo], references: [id])
  assignedClassId    String?   @map("assigned_class_id")
  assignedClass      Class?    @relation("AssignedClass", fields: [assignedClassId], references: [id])
  assignedClassArmId String?   @map("assigned_class_arm_id")
  assignedClassArm   ClassArm? @relation("AssignedClassArm", fields: [assignedClassArmId], references: [id])

  // Previous School Info
  formerSchoolName    String? @map("former_school_name")
  formerSchoolAddress String? @map("former_school_address")
  formerSchoolContact String? @map("former_school_contact")

  // Additional Info
  healthProblems  String?         @map("health_problems")
  howHeardAboutUs String?         @map("how_heard_about_us")
  admissionStatus AdmissionStatus @default(pending) @map("admission_status")
  admissionDate   DateTime?       @map("admission_date")
  rejectionReason String?         @map("rejection_reason")

  // Metadata
  isDeleted Boolean   @default(false)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")

  @@index([schoolId, studentId, sessionId])
  @@map("admissions")
}

// Session model 
model Session {
  id                     String                     @id @default(uuid())
  name                   String
  schoolId               String                     @map("school_id")
  school                 School                     @relation(fields: [schoolId], references: [id])
  terms                  SessionTerm[] // Modified: Links to SessionTerm
  schools                School[]                   @relation("SchoolCurrentSession")
  isActive               Boolean                    @default(false)
  isDeleted              Boolean                    @default(false)
  admissions             Admission[]                @relation("SessionAdmissions")
  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @updatedAt @map("updated_at")
  createdBy              String?                    @map("created_by")
  updatedBy              String?                    @map("updated_by")
  classAssignments       SessionClassAssignment[]
  attendanceRecords      Attendance[]
  scores                 StudentScoreAssignment[]   @relation("SessionScores")
  termRecords            StudentTermRecord[]        @relation("SessionTermRecords")
  studentSubjects        StudentSubjectAssignment[]
  resultBatches          ResultBatch[]
  StudentClassAssignment StudentClassAssignment[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("sessions")
}

// Modified: Replaced Term with TermDefinition and SessionTerm 
// Term definition model for creating term templates
model TermDefinition {
  id                            String                             @id @default(uuid())
  name                          TermEnum // e.g., "First_Term", "Second_Term", "Third_Term"
  schoolId                      String                             @map("school_id")
  school                        School                             @relation(fields: [schoolId], references: [id])
  sessionTerms                  SessionTerm[] // Links to term schedules
  classMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[] // Links to marking scheme assignments
  createdAt                     DateTime?                          @default(now()) @map("created_at")
  updatedAt                     DateTime?                          @updatedAt @map("updated_at")
  createdBy                     String?                            @map("created_by")
  updatedBy                     String?                            @map("updated_by")
  scores                        StudentScoreAssignment[]           @relation("TermScores")
  termRecords                   StudentTermRecord[]                @relation("TermRecords")
  resultBatches                 ResultBatch[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("term_definitions")
}

// SessionTerm model - Links sessions to term definitions with dates
model SessionTerm {
  id                String         @id @default(uuid())
  termDefinitionId  String         @map("term_definition_id")
  termDefinition    TermDefinition @relation(fields: [termDefinitionId], references: [id])
  sessionId         String         @map("session_id")
  session           Session        @relation(fields: [sessionId], references: [id])
  startDate         DateTime
  endDate           DateTime
  schoolId          String         @map("school_id")
  school            School         @relation(fields: [schoolId], references: [id])
  isActive          Boolean        @default(false)
  isDeleted         Boolean        @default(false)
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdBy         String?        @map("created_by")
  updatedBy         String?        @map("updated_by") // Relations
  attendanceRecords Attendance[]   @relation("TermAttendance")
  currentSchools    School[]       @relation("SchoolCurrentTerm") // Back-reference for School.currentTerm

  @@unique([sessionId, termDefinitionId])
  @@index([schoolId, sessionId, termDefinitionId])
  @@map("session_terms")
}

model SessionClassAssignment {
  id         String    @id @default(uuid())
  sessionId  String    @map("session_id") @db.VarChar(50)
  classId    String    @map("class_id") @db.VarChar(50)
  classArmId String    @map("class_arm_id") @db.VarChar(50)
  schoolId   String    @map("school_id") @db.VarChar(50)
  session    Session   @relation(fields: [sessionId], references: [id])
  class      Class     @relation(fields: [classId], references: [id])
  classArm   ClassArm  @relation(fields: [classArmId], references: [id])
  school     School    @relation(fields: [schoolId], references: [id])
  isDeleted  Boolean   @default(false)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  createdBy  String?   @map("created_by") @db.VarChar(50)
  updatedBy  String?   @map("updated_by") @db.VarChar(50)

  @@unique([sessionId, classId, classArmId, schoolId])
  @@index([schoolId, sessionId])
}

// Subject model
model Subject {
  id                 String                      @id @default(uuid())
  name               String
  code               String
  schoolId           String                      @map("school_id")
  isDeleted          Boolean                     @default(false)
  school             School                      @relation(fields: [schoolId], references: [id])
  studentSubjects    StudentSubjectAssignment[]  @relation("SubjectStudents")
  createdAt          DateTime?                   @default(now()) @map("created_at")
  updatedAt          DateTime?                   @updatedAt @map("updated_at")
  createdBy          String?                     @map("created_by")
  updatedBy          String?                     @map("updated_by")
  classArmSubjects   ClassArmSubjectAssignment[] @relation("SubjectAssignments")
  teacherAssignments TeacherSubjectAssignment[]
  scores             StudentScoreAssignment[]
  studentResults     StudentResult[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("subjects")
}

// StudentSubjectAssignment model
model StudentSubjectAssignment {
  id                        String                     @id @default(uuid())
  studentId                 String                     @map("student_id")
  subjectId                 String                     @map("subject_id")
  schoolId                  String                     @map("school_id")
  sessionId                 String                     @map("session_id") // New: Tie to session
  student                   Student                    @relation(fields: [studentId], references: [id])
  subject                   Subject                    @relation("SubjectStudents", fields: [subjectId], references: [id])
  school                    School                     @relation(fields: [schoolId], references: [id])
  session                   Session                    @relation(fields: [sessionId], references: [id])
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  createdBy                 String?                    @map("created_by")
  updatedBy                 String?                    @map("updated_by")
  classArmSubjectId         String                     @map("class_arm_subject_id")
  classArmSubjectAssignment ClassArmSubjectAssignment? @relation(fields: [classArmSubjectId], references: [id])

  @@unique([studentId, subjectId, schoolId])
  @@index([schoolId, studentId])
  @@map("student_subjects")
}

model ClassArmSubjectAssignment {
  id                        String                     @id @default(uuid())
  classId                   String                     @map("class_id")
  classArmId                String                     @map("class_arm_id")
  subjectId                 String                     @map("subject_id")
  schoolId                  String                     @map("school_id")
  class                     Class                      @relation(fields: [classId], references: [id])
  classArm                  ClassArm                   @relation(fields: [classArmId], references: [id])
  subject                   Subject                    @relation("SubjectAssignments", fields: [subjectId], references: [id])
  school                    School                     @relation(fields: [schoolId], references: [id])
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  createdBy                 String?                    @map("created_by")
  updatedBy                 String?                    @map("updated_by")
  teacherAssignments        TeacherSubjectAssignment[]
  studentSubjectAssignments StudentSubjectAssignment[]

  @@unique([classId, classArmId, subjectId, schoolId])
  @@index([schoolId, classId, classArmId])
  @@map("class_arm_subjects_assignment")
}

// Permission model
model Permission {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  isDeleted          Boolean             @default(false)
  scope              PermissionScope     @default(school)
  subRoleAssignments SubRolePermission[] @relation("PermissionAssignments")
  createdAt          DateTime?           @default(now()) @map("created_at")
  updatedAt          DateTime?           @updatedAt @map("updated_at")
  createdBy          String?             @map("created_by")
  updatedBy          String?             @map("updated_by")

  @@map("permissions")
}

// SubRole model
model SubRole {
  id          String              @id @default(uuid())
  name        String
  schoolId    String?             @map("school_id")
  school      School?             @relation(fields: [schoolId], references: [id])
  description String?
  isGlobal    Boolean             @default(false)
  permissions SubRolePermission[] @relation("RoleAssignments")
  users       User[]              @relation("UserRoles")
  isDeleted   Boolean?            @default(false)
  scope       PermissionScope     @default(school)
  createdAt   DateTime?           @default(now()) @map("created_at")
  updatedAt   DateTime?           @updatedAt @map("updated_at")
  createdBy   String?             @map("created_by")
  updatedBy   String?             @map("updated_by")

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("sub_roles")
}

model SubRolePermission {
  id           String     @id @default(uuid())
  subRoleId    String     @map("sub_role_id")
  permissionId String     @map("permission_id")
  schoolId     String?    @map("school_id")
  school       School?    @relation(fields: [schoolId], references: [id])
  subRole      SubRole    @relation("RoleAssignments", fields: [subRoleId], references: [id])
  permission   Permission @relation("PermissionAssignments", fields: [permissionId], references: [id])
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  createdBy    String?    @map("created_by")
  updatedBy    String?    @map("updated_by")

  @@unique([subRoleId, permissionId, schoolId])
  @@index([schoolId, subRoleId])
  @@map("sub_role_permissions")
}

// Subscription model
model Subscription {
  id           String                @id @default(uuid())
  name         String                @unique
  amount       Int?
  studentLimit Int?
  duration     Int?
  schools      School[]              @relation("SubscriptionSchools")
  isDeleted    Boolean               @default(false)
  isActive     Boolean               @default(true)
  features     Json?
  createdAt    DateTime?             @default(now()) @map("created_at")
  updatedAt    DateTime?             @updatedAt @map("updated_at")
  createdBy    String?               @map("created_by")
  updatedBy    String?               @map("updated_by")
  payments     SubscriptionPayment[] @relation("SubscriptionPayments")

  @@map("subscriptions")
}

model Attendance {
  id         String           @id @default(uuid())
  studentId  String           @map("student_id") @db.VarChar(50)
  schoolId   String           @map("school_id") @db.VarChar(50)
  sessionId  String           @map("session_id") @db.VarChar(50)
  termId     String           @map("term_id") @db.VarChar(50)
  classId    String           @map("class_id") @db.VarChar(50)
  classArmId String           @map("class_arm_id") @db.VarChar(50)
  status     AttendanceStatus @default(present)
  date       DateTime
  createdAt  DateTime?        @default(now()) @map("created_at")
  updatedAt  DateTime?        @updatedAt @map("updated_at")
  createdBy  String?          @map("created_by") @db.VarChar(50)
  updatedBy  String?          @map("updated_by") @db.VarChar(50)
  student    Student          @relation("StudentAttendance", fields: [studentId], references: [id])
  school     School           @relation(fields: [schoolId], references: [id])
  session    Session          @relation(fields: [sessionId], references: [id])
  term       SessionTerm      @relation("TermAttendance", fields: [termId], references: [id])
  class      Class            @relation(fields: [classId], references: [id])
  classArm   ClassArm         @relation(fields: [classArmId], references: [id])

  @@unique([studentId, date, schoolId, sessionId, termId])
  @@index([studentId, date])
  @@index([schoolId, sessionId, termId])
}

// when creating this either on accept admission or on promotion or on create new student directly, create a new StudentSubjectAssignment by fetching all subjects for the class and class arm the student is to be assigned to
model StudentClassAssignment {
  id                       String                   @id @default(uuid())
  studentId                String                   @map("student_id")
  sessionId                String                   @map("session_id")
  classId                  String                   @map("class_id")
  classArmId               String                   @map("class_arm_id")
  schoolId                 String                   @map("school_id")
  isActive                 Boolean                  @default(true)
  promotedFromAssignmentId String?                  @map("promoted_from_assignment_id") // New: Tracks previous assignment
  promotedFromAssignment   StudentClassAssignment?  @relation("PromotionHistory", fields: [promotedFromAssignmentId], references: [id])
  promotedToAssignments    StudentClassAssignment[] @relation("PromotionHistory") // Back-reference  createdAt                DateTime?                @default(now()) @map("created_at")
  updatedAt                DateTime?                @updatedAt @map("updated_at")
  createdBy                String?                  @map("created_by")
  updatedBy                String?                  @map("updated_by")
  student                  Student                  @relation("StudentClassAssignment", fields: [studentId], references: [id])
  session                  Session                  @relation(fields: [sessionId], references: [id])
  class                    Class                    @relation(fields: [classId], references: [id])
  classArm                 ClassArm                 @relation(fields: [classArmId], references: [id])
  school                   School                   @relation(fields: [schoolId], references: [id])

  @@unique([studentId, sessionId, schoolId])
  @@index([studentId, sessionId])
  @@index([classId, classArmId, schoolId])
  @@map("student_class_assignments")
}

// LogEntry model
model LogEntry {
  id        String    @id @default(uuid())
  action    String
  target    String?
  targetId  String?
  isDeleted Boolean   @default(false)
  userId    String?   @map("user_id") @db.VarChar(191)
  schoolId  String?   @map("school_id") @db.VarChar(191)
  meta      Json?
  timestamp DateTime? @default(now())
  ipAddress String?   @map("ip_address")
  device    String?
  location  String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School?   @relation(fields: [schoolId], references: [id])

  @@index([userId, schoolId])
  @@map("log_entries")
}

model SubscriptionPayment {
  id             String        @id @default(uuid())
  schoolId       String        @map("school_id")
  subscriptionId String        @map("subscription_id")
  school         School        @relation(fields: [schoolId], references: [id])
  subscription   Subscription  @relation("SubscriptionPayments", fields: [subscriptionId], references: [id])
  amount         Float
  reference      String?
  paymentMethod  String?       @map("payment_method")
  paymentStatus  PaymentStatus @default(pending) @map("payment_status")
  paymentDate    DateTime?     @map("payment_date")
  createdAt      DateTime?     @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  createdBy      String?       @map("created_by")

  @@index([schoolId, subscriptionId])
  @@map("subscription_payments")
}

model Invoice {
  id             String        @id @default(uuid())
  schoolId       String        @map("school_id")
  school         School        @relation(fields: [schoolId], references: [id])
  studentId      String?       @map("student_id")
  student        Student?      @relation(fields: [studentId], references: [id])
  classId        String?       @map("class_id")
  class          Class?        @relation(fields: [classId], references: [id])
  classArmId     String?       @map("class_arm_id")
  classArm       ClassArm?     @relation(fields: [classArmId], references: [id])
  amount         Float
  title          String
  description    String?
  reference      String
  outstanding    Float?
  discount       Float?
  dueDate        DateTime?     @map("due_date")
  paid           Float?
  status         InvoiceStatus @default(submitted)
  paymentReceipt String?       @map("payment_receipt")
  issuedDate     DateTime      @map("issued_date")
  createdAt      DateTime?     @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  createdBy      String?       @map("created_by")

  @@index([schoolId, studentId])
  @@map("invoices")
}

model Communication {
  id               String    @id @default(uuid())
  name             String
  startDate        DateTime  @map("start_date")
  endDate          DateTime  @map("end_date")
  eventColor       String    @map("event_color")
  eventDescription String    @map("event_description")
  schoolId         String    @map("school_id")
  school           School    @relation(fields: [schoolId], references: [id])
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  @@index([schoolId])
  @@map("communications")
}

// MarkingScheme (Parent, holds only name and metadata)
model MarkingScheme {
  id               String                             @id @default(uuid())
  name             String // e.g., "Special Marking Scheme"
  schoolId         String                             @map("school_id")
  school           School                             @relation(fields: [schoolId], references: [id])
  components       MarkingSchemeComponent[]           @relation("SchemeComponents")
  classAssignments ClassTermMarkingSchemeAssignment[] @relation("SchemeAssignments")
  createdAt        DateTime?                          @default(now()) @map("created_at")
  updatedAt        DateTime?                          @updatedAt @map("updated_at")
  createdBy        String?                            @map("created_by")
  updatedBy        String?                            @map("updated_by")
  isDeleted        Boolean                            @default(false)

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("marking_schemes")
}

// New MarkingSchemeComponent (Child divisions)
model MarkingSchemeComponent {
  id                    String                   @id @default(uuid())
  markingSchemeId       String                   @map("marking_scheme_id")
  markingScheme         MarkingScheme            @relation("SchemeComponents", fields: [markingSchemeId], references: [id])
  name                  String // e.g., "Exam", "CA1"
  score                 Int // e.g., 60, 20
  type                  AssessmentType // CA or EXAM
  schoolId              String                   @map("school_id")
  school                School                   @relation(fields: [schoolId], references: [id])
  continuousAssessments ContinuousAssessment[]   @relation("ComponentAssessments")
  scores                StudentScoreAssignment[] @relation("ComponentScores")
  createdAt             DateTime?                @default(now()) @map("created_at")
  updatedAt             DateTime?                @updatedAt @map("updated_at")
  createdBy             String?                  @map("created_by")
  updatedBy             String?                  @map("updated_by")
  isDeleted             Boolean                  @default(false)
  resultBatches         ResultBatch[]            @relation("BatchResultType")

  @@unique([markingSchemeId, name])
  @@index([schoolId, markingSchemeId])
  @@map("marking_scheme_components")
}

// ContinuousAssessment (Linked to MarkingSchemeComponent for CA types)
model ContinuousAssessment {
  id                       String                          @id @default(uuid())
  markingSchemeComponentId String                          @map("marking_scheme_component_id")
  markingSchemeComponent   MarkingSchemeComponent          @relation("ComponentAssessments", fields: [markingSchemeComponentId], references: [id])
  schoolId                 String                          @map("school_id")
  school                   School                          @relation(fields: [schoolId], references: [id])
  components               ContinuousAssessmentComponent[] @relation("AssessmentComponents")
  scores                   StudentScoreAssignment[]        @relation("AssessmentScores")
  createdAt                DateTime?                       @default(now()) @map("created_at")
  updatedAt                DateTime?                       @updatedAt @map("updated_at")
  createdBy                String?                         @map("created_by")
  updatedBy                String?                         @map("updated_by")
  isDeleted                Boolean                         @default(false)

  @@unique([markingSchemeComponentId, schoolId])
  @@index([schoolId, markingSchemeComponentId])
  @@map("continuous_assessments")
}

// Added: ContinuousAssessmentComponent for CA sub-divisions
model ContinuousAssessmentComponent {
  id                     String                   @id @default(uuid())
  continuousAssessmentId String                   @map("continuous_assessment_id")
  continuousAssessment   ContinuousAssessment     @relation("AssessmentComponents", fields: [continuousAssessmentId], references: [id])
  schoolId               String                   @map("school_id")
  school                 School                   @relation(fields: [schoolId], references: [id])
  name                   String // e.g., "Homework", "Note"
  score                  Int // e.g., 5, 10
  createdAt              DateTime?                @default(now()) @map("created_at")
  updatedAt              DateTime?                @updatedAt @map("updated_at")
  createdBy              String?                  @map("created_by")
  updatedBy              String?                  @map("updated_by")
  scores                 StudentScoreAssignment[] @relation("ComponentScores")
  isDeleted              Boolean                  @default(false)

  @@unique([continuousAssessmentId, name])
  @@index([schoolId, continuousAssessmentId])
  @@map("continuous_assessment_components")
}

// Added: GradingSystem for grading systems
model GradingSystem {
  id               String               @id @default(uuid())
  name             String // e.g., "Standard Grading"
  schoolId         String               @map("school_id")
  school           School               @relation(fields: [schoolId], references: [id])
  grades           Grade[]              @relation("SystemGrades")
  classAssignments ClassGradingSystem[] @relation("SystemAssignments")
  isDeleted        Boolean              @default(false)
  createdAt        DateTime?            @default(now()) @map("created_at")
  updatedAt        DateTime?            @updatedAt @map("updated_at")
  createdBy        String?              @map("created_by")
  updatedBy        String?              @map("updated_by")

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("grading_systems")
}

// Added: Grade for individual grades
model Grade {
  id               String          @id @default(uuid())
  gradingSystemId  String          @map("grading_system_id")
  gradingSystem    GradingSystem   @relation("SystemGrades", fields: [gradingSystemId], references: [id])
  schoolId         String          @map("school_id")
  school           School          @relation(fields: [schoolId], references: [id])
  name             String // e.g., "A1"
  scoreStartPoint  Int             @map("score_start_point") // e.g., 70
  scoreEndPoint    Int             @map("score_end_point") // e.g., 100
  remark           String? // e.g., "Excellent"
  teacherComment   String?         @map("teacher_comment")
  principalComment String?         @map("principal_comment")
  isDeleted        Boolean         @default(false)
  createdAt        DateTime?       @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")
  createdBy        String?         @map("created_by")
  updatedBy        String?         @map("updated_by")
  studentResults   StudentResult[]

  @@unique([gradingSystemId, name])
  @@index([schoolId, gradingSystemId])
  @@map("grades")
}

// Added: ClassGradingSystem to assign grading systems to classes
model ClassGradingSystem {
  id              String        @id @default(uuid())
  gradingSystemId String        @map("grading_system_id")
  gradingSystem   GradingSystem @relation("SystemAssignments", fields: [gradingSystemId], references: [id])
  classId         String        @map("class_id")
  class           Class         @relation(fields: [classId], references: [id])
  schoolId        String        @map("school_id")
  school          School        @relation(fields: [schoolId], references: [id])
  isDeleted       Boolean       @default(false)
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  createdBy       String?       @map("created_by")
  updatedBy       String?       @map("updated_by")

  @@unique([classId, schoolId])
  @@index([schoolId, classId, gradingSystemId])
  @@map("class_grading_systems")
}

// Added: ClassTermMarkingSchemeAssignment to assign marking schemes to classes and terms
model ClassTermMarkingSchemeAssignment {
  id               String         @id @default(uuid())
  markingSchemeId  String         @map("marking_scheme_id")
  markingScheme    MarkingScheme  @relation("SchemeAssignments", fields: [markingSchemeId], references: [id])
  classId          String         @map("class_id")
  class            Class          @relation(fields: [classId], references: [id])
  termDefinitionId String         @map("term_definition_id")
  termDefinition   TermDefinition @relation(fields: [termDefinitionId], references: [id])
  schoolId         String         @map("school_id")
  school           School         @relation(fields: [schoolId], references: [id])
  isDeleted        Boolean        @default(false)
  createdAt        DateTime?      @default(now()) @map("created_at")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  createdBy        String?        @map("created_by")
  updatedBy        String?        @map("updated_by")

  @@unique([classId, termDefinitionId, schoolId])
  @@index([schoolId, classId, termDefinitionId])
  @@map("class_term_marking_scheme_assignments")
}

// Added: TeacherSubjectAssignment for teacher-subject-class assignments
model TeacherSubjectAssignment {
  id                String                     @id @default(uuid())
  staffId           String                     @map("staff_id") @db.VarChar(50)
  subjectId         String                     @map("subject_id") @db.VarChar(50)
  classId           String                     @map("class_id") @db.VarChar(50)
  classArmId        String                     @map("class_arm_id") @db.VarChar(50)
  schoolId          String                     @map("school_id") @db.VarChar(50)
  staff             Staff                      @relation(fields: [staffId], references: [id])
  subject           Subject                    @relation(fields: [subjectId], references: [id])
  class             Class                      @relation(fields: [classId], references: [id])
  classArm          ClassArm                   @relation(fields: [classArmId], references: [id])
  school            School                     @relation(fields: [schoolId], references: [id])
  classArmSubjectId String?                    @map("class_arm_subject_id") @db.VarChar(50)
  classArmSubject   ClassArmSubjectAssignment? @relation(fields: [classArmSubjectId], references: [id])
  isDeleted         Boolean                    @default(false)
  createdAt         DateTime?                  @default(now()) @map("created_at")
  updatedAt         DateTime?                  @updatedAt @map("updated_at")
  createdBy         String?                    @map("created_by") @db.VarChar(50)
  updatedBy         String?                    @map("updated_by") @db.VarChar(50)

  @@unique([staffId, subjectId, classId, classArmId])
  @@index([schoolId, staffId])
}

/// Assignment of a class teacher to a class arm (school dependent, not session dependent)
model ClassArmTeacherAssignment {
  id         String   @id @default(uuid())
  staffId    String   @map("staff_id")
  staff      Staff    @relation(fields: [staffId], references: [id])
  classId    String   @map("class_id")
  class      Class    @relation(fields: [classId], references: [id])
  classArmId String   @map("class_arm_id")
  classArm   ClassArm @relation(fields: [classArmId], references: [id])
  schoolId   String   @map("school_id")
  school     School   @relation(fields: [schoolId], references: [id])
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdBy  String?  @map("created_by")
  updatedBy  String?  @map("updated_by")

  @@unique([classId, classArmId, schoolId])
  @@index([schoolId, staffId])
  // This model links a teacher (staff) to a class arm for a school.
}

// Added: StudentScoreAssignment for storing student scores
model StudentScoreAssignment {
  id                              String                         @id @default(uuid())
  studentId                       String                         @map("student_id")
  student                         Student                        @relation(fields: [studentId], references: [id])
  subjectId                       String                         @map("subject_id")
  subject                         Subject                        @relation(fields: [subjectId], references: [id])
  classId                         String                         @map("class_id")
  class                           Class                          @relation(fields: [classId], references: [id])
  classArmId                      String                         @map("class_arm_id")
  classArm                        ClassArm                       @relation(fields: [classArmId], references: [id])
  sessionId                       String                         @map("session_id")
  session                         Session                        @relation("SessionScores", fields: [sessionId], references: [id])
  termDefinitionId                String                         @map("term_definition_id")
  termDefinition                  TermDefinition                 @relation("TermScores", fields: [termDefinitionId], references: [id])
  markingSchemeComponentId        String?                        @map("marking_scheme_component_id")
  markingSchemeComponent          MarkingSchemeComponent?        @relation("ComponentScores", fields: [markingSchemeComponentId], references: [id])
  continuousAssessmentId          String?                        @map("continuous_assessment_id")
  continuousAssessment            ContinuousAssessment?          @relation("AssessmentScores", fields: [continuousAssessmentId], references: [id])
  continuousAssessmentComponentId String?                        @map("continuous_assessment_component_id")
  continuousAssessmentComponent   ContinuousAssessmentComponent? @relation("ComponentScores", fields: [continuousAssessmentComponentId], references: [id])
  score                           Float // Score for the component or exam
  recordedBy                      String                         @map("recorded_by") // Teacher who recorded the score

  uniqueHash String    @unique @map("unique_hash") @db.VarChar(64)
  schoolId   String    @map("school_id")
  school     School    @relation(fields: [schoolId], references: [id])
  isDeleted  Boolean   @default(false)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  createdBy  String?   @map("created_by")
  updatedBy  String?   @map("updated_by")

  // Allow multiple scores per student/subject/term for different components
  // @@unique([studentId, subjectId, sessionId, termDefinitionId, markingSchemeComponentId, continuousAssessmentComponentId])
  @@index([schoolId, studentId, sessionId, termDefinitionId])
  @@map("student_score_assignments")
}

// Added: StudentTermRecord for storing behavioral, attendance and comment data per student/class/term/session
model StudentTermRecord {
  id               String            @id @default(uuid())
  studentId        String            @map("student_id")
  student          Student           @relation("StudentTermRecords", fields: [studentId], references: [id])
  classId          String            @map("class_id")
  class            Class             @relation("ClassTermRecords", fields: [classId], references: [id])
  classArmId       String            @map("class_arm_id")
  classArm         ClassArm          @relation("ClassArmTermRecords", fields: [classArmId], references: [id])
  sessionId        String            @map("session_id")
  session          Session           @relation("SessionTermRecords", fields: [sessionId], references: [id])
  termDefinitionId String            @map("term_definition_id")
  termDefinition   TermDefinition    @relation("TermRecords", fields: [termDefinitionId], references: [id])
  schoolId         String            @map("school_id")
  school           School            @relation("SchoolTermRecords", fields: [schoolId], references: [id])
  uniqueHash       String            @unique @map("unique_hash") @db.VarChar(64) // Unique hash for this record
  // Behavioral ratings
  punctuality      BehavioralRating? @map("punctuality")
  attentiveness    BehavioralRating? @map("attentiveness")
  leadershipSkills BehavioralRating? @map("leadership_skills")
  neatness         BehavioralRating? @map("neatness")

  // Attendance tracking
  attendanceTotal   Int? @map("attendance_total")
  attendancePresent Int? @map("attendance_present")
  attendanceAbsent  Int? @map("attendance_absent")

  // Comments
  classTeacherComment String? @map("class_teacher_comment") @db.Text
  principalComment    String? @map("principal_comment") @db.Text

  // Metadata
  recordedBy String    @map("recorded_by") // Teacher who recorded the data
  isDeleted  Boolean   @default(false)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  createdBy  String?   @map("created_by")
  updatedBy  String?   @map("updated_by")

  // Ensure one record per student/class/term/session
  @@index([schoolId, studentId, sessionId, termDefinitionId])
  @@map("student_term_records")
}

// Main Result Batch - One record per computation request
model ResultBatch {
  id             String                 @id @default(uuid())
  sessionId      String                 @map("session_id")
  session        Session                @relation(fields: [sessionId], references: [id])
  termId         String                 @map("term_id") // termDefinitionId
  termDefinition TermDefinition         @relation(fields: [termId], references: [id])
  classId        String                 @map("class_id")
  class          Class                  @relation(fields: [classId], references: [id])
  classArmId     String                 @map("class_arm_id")
  classArm       ClassArm               @relation(fields: [classArmId], references: [id])
  resultTypeId   String                 @map("result_type_id") // markingSchemeComponentId
  resultType     MarkingSchemeComponent @relation("BatchResultType", fields: [resultTypeId], references: [id])
  resultScope    AssessmentType // CA or EXAM
  schoolId       String                 @map("school_id")
  school         School                 @relation(fields: [schoolId], references: [id])

  // Store the marking scheme structure used for this computation
  markingSchemeStructure Json @map("marking_scheme_structure") // Dynamic structure

  // Batch metadata
  title       String // e.g., "First Term Terminal Results - Class 10A"
  description String?
  isApproved  Boolean   @default(false)
  approvedBy  String?   @map("approved_by")
  approvedAt  DateTime? @map("approved_at")

  // Statistics
  totalStudents Int    @map("total_students")
  totalSubjects Int    @map("total_subjects")
  classAverage  Float? @map("class_average")
  uniqueHash    String @unique @map("unique_hash") @db.VarChar(64) // Unique hash for this batch

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String   @map("created_by")
  updatedBy String?  @map("updated_by")

  // Relations
  studentResults StudentResult[] @relation("BatchResults")

  // @@unique([sessionId, termId, classId, classArmId, resultTypeId, resultScope, schoolId])
  @@map("result_batches")
}

// Individual student results within a batch
model StudentResult {
  id            String      @id @default(uuid())
  resultBatchId String      @map("result_batch_id")
  resultBatch   ResultBatch @relation("BatchResults", fields: [resultBatchId], references: [id])
  studentId     String      @map("student_id")
  student       Student     @relation(fields: [studentId], references: [id])
  subjectId     String      @map("subject_id")
  subject       Subject     @relation(fields: [subjectId], references: [id])

  // Dynamic scores based on marking scheme
  componentScores Json    @map("component_scores") // Dynamic breakdown
  totalScore      Float
  gradeId         String? @map("grade_id")
  grade           Grade?  @relation(fields: [gradeId], references: [id])
  position        Int? // Position in subject within class arm

  // Comments
  teacherComment String? @map("teacher_comment")

  schoolId String @map("school_id")
  school   School @relation(fields: [schoolId], references: [id])

  @@unique([resultBatchId, studentId, subjectId])
  @@map("student_results")
}

model Configuration {
  id                  String  @id @default(uuid())
  logo                Json?   @map("logo")
  country             String? @map("country") // New: For school country
  state               String? @map("state") // New: For school state
  color               String? @map("color") // New: For school color
  schoolHeadName      String? @map("school_head_name") // New: For school head name
  schoolHeadContact   String? @map("school_head_contact") // New: For school head email
  schoolHeadSignature Json?   @map("school_head_signature") // New: For school head signature
  principalName       String? @map("principal_name") // New: For principal name
  principalContact    String? @map("principal_contact") // New: For principal contact
  principalSignature  Json?   @map("principal_signature") // New: For principal signature
  bursarName          String? @map("bursar_name") // New: For bursar name
  bursarContact       String? @map("bursar_contact") // New: For bursar contact
  bursarSignature     Json?   @map("bursar_signature") // New: For bursar signature
  schoolId            String  @unique @map("school_id")
  school              School  @relation("SchoolConfiguration", fields: [schoolId], references: [id])
  isDeleted           Boolean @default(false)

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")

  @@index([schoolId])
  @@map("configurations")
}

model ReportSheetSetting {
  id                  String    @id @default(uuid())
  classId             String    @map("class_id") @db.VarChar(50)
  class               Class     @relation(fields: [classId], references: [id])
  padding             String    @map("padding") @db.VarChar(50)
  headerFont          String    @map("header_font") @db.VarChar(50)
  subjectFont         String    @map("subject_font") @db.VarChar(50)
  valueFont           String    @map("value_font") @db.VarChar(50)
  classTeacherCompute Boolean   @default(false) @map("class_teacher_compute")
  showAge             Boolean   @default(false) @map("show_age")
  showPosition        Boolean   @default(false) @map("show_position")
  showNextFee         Boolean   @default(false) @map("show_next_fee")
  schoolId            String    @map("school_id") @db.VarChar(50)
  school              School    @relation(fields: [schoolId], references: [id])
  isDeleted           Boolean   @default(false)
  createdAt           DateTime? @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  createdBy           String?   @map("created_by") @db.VarChar(50)
  updatedBy           String?   @map("updated_by") @db.VarChar(50)
}

// Enums
enum Gender {
  male
  female
}

enum AssessmentType {
  CA
  EXAM
}

enum PaymentStatus {
  pending
  success
  failed
}

enum InvoiceStatus {
  submitted
  paid
  overdue
  cancelled
}

enum Role {
  admin
  superAdmin
}

enum AttendanceStatus {
  present
  absent
  late
}

enum PermissionScope {
  platform
  school
}

enum AdmissionStatus {
  pending
  accepted
  rejected
}

enum TermEnum {
  First_Term
  Second_Term
  Third_Term
}

enum BehavioralRating {
  excellent
  very_good
  good
  fair
  poor
}
