generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
//comment
// User model for common user data 
model User {
  id              String    @id @default(cuid())
  firstname       String?
  lastname        String?
  othername       String?
  username        String    @unique
  email           String?   @unique
  contact         String?   @unique
  gender          Gender?
  address         String?
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime? @map("email_verified_at")
  password        String
  isDeleted       Boolean   @default(false)
  plainPassword   String
  role            Role      @default(admin)
  rememberToken   String?   @map("remember_token")
  avatar          Json?     @map("avatar")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  schoolSlug      String?   @map("school_slug")
  schoolId        String?   @map("school_id")
  school          School?   @relation(fields: [schoolId], references: [id])
  subRoleId       String?   @map("sub_role_id")
  subRole         SubRole?  @relation("UserRoles", fields: [subRoleId], references: [id])
  logEntries      LogEntry[]
  staff           Staff?    @relation("UserToStaff")
  student         Student?  @relation("UserToStudent")
  parent          Parent?   @relation("UserToParent")
  createdBy           String?   @map("created_by")
  updatedBy           String?   @map("updated_by")
  // createdByUser       User?     @relation("UserCreatedBy", fields: [createdBy], references: [id])
  // updatedByUser       User?     @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  createdSchools      School[]  @relation("SchoolCreatedBy")
  updatedSchools      School[]  @relation("SchoolUpdatedBy")
  createdStaff        Staff[]   @relation("StaffCreatedBy")
  updatedStaff        Staff[]   @relation("StaffUpdatedBy")
  createdStudents     Student[] @relation("StudentCreatedBy")
  updatedStudents     Student[] @relation("StudentUpdatedBy")
  createdParents      Parent[]  @relation("ParentCreatedBy")
  updatedParents      Parent[]  @relation("ParentUpdatedBy")
  createdClasses      Class[]   @relation("ClassCreatedBy")
  updatedClasses      Class[]   @relation("ClassUpdatedBy")
  createdClassCategories ClassCategory[] @relation("ClassCategoryCreatedBy")
  updatedClassCategories ClassCategory[] @relation("ClassCategoryUpdatedBy")
  createdClassArms    ClassArm[] @relation("ClassArmCreatedBy")
  updatedClassArms    ClassArm[] @relation("ClassArmUpdatedBy")
  createdAdmissions   Admission[] @relation("AdmissionCreatedBy")
  updatedAdmissions   Admission[] @relation("AdmissionUpdatedBy")
  createdSessions     Session[]  @relation("SessionCreatedBy")
  updatedSessions     Session[]  @relation("SessionUpdatedBy")
  createdTermDefinitions TermDefinition[] @relation("TermDefinitionCreatedBy")
  updatedTermDefinitions TermDefinition[] @relation("TermDefinitionUpdatedBy")
  createdSessionTerms SessionTerm[] @relation("SessionTermCreatedBy")
  updatedSessionTerms SessionTerm[] @relation("SessionTermUpdatedBy")
  createdSessionClassAssignments SessionClassAssignment[] @relation("SessionClassAssignmentCreatedBy")
  updatedSessionClassAssignments SessionClassAssignment[] @relation("SessionClassAssignmentUpdatedBy")
  createdSubjects     Subject[]  @relation("SubjectCreatedBy")
  updatedSubjects     Subject[]  @relation("SubjectUpdatedBy")
  createdStudentSubjectAssignments StudentSubjectAssignment[] @relation("StudentSubjectAssignmentCreatedBy")
  updatedStudentSubjectAssignments StudentSubjectAssignment[] @relation("StudentSubjectAssignmentUpdatedBy")
  createdClassArmSubjectAssignments ClassArmSubjectAssignment[] @relation("ClassArmSubjectAssignmentCreatedBy")
  updatedClassArmSubjectAssignments ClassArmSubjectAssignment[] @relation("ClassArmSubjectAssignmentUpdatedBy")
  createdPermissions  Permission[] @relation("PermissionCreatedBy")
  updatedPermissions  Permission[] @relation("PermissionUpdatedBy")
  createdSubRoles     SubRole[]  @relation("SubRoleCreatedBy")
  updatedSubRoles     SubRole[]  @relation("SubRoleUpdatedBy")
  createdSubRolePermissions SubRolePermission[] @relation("SubRolePermissionCreatedBy")
  updatedSubRolePermissions SubRolePermission[] @relation("SubRolePermissionUpdatedBy")
  createdSubscriptions Subscription[] @relation("SubscriptionCreatedBy")
  updatedSubscriptions Subscription[] @relation("SubscriptionUpdatedBy")
  createdAttendances  Attendance[] @relation("AttendanceCreatedBy")
  updatedAttendances  Attendance[] @relation("AttendanceUpdatedBy")
  createdStudentClassAssignments StudentClassAssignment[] @relation("StudentClassAssignmentCreatedBy")
  updatedStudentClassAssignments StudentClassAssignment[] @relation("StudentClassAssignmentUpdatedBy")
  createdLogEntries   LogEntry[] @relation("LogEntryCreatedBy")
  createdSubscriptionPayments SubscriptionPayment[] @relation("SubscriptionPaymentCreatedBy")
  createdInvoices     Invoice[]  @relation("InvoiceCreatedBy")
  createdStudentInvoiceAssignments StudentInvoiceAssignment[] @relation("StudentInvoiceAssignmentCreatedBy")
  updatedStudentInvoiceAssignments StudentInvoiceAssignment[] @relation("StudentInvoiceAssignmentUpdatedBy")
  createdDiscounts    Discount[] @relation("DiscountCreatedBy")
  approvedDiscounts   Discount[] @relation("DiscountApprovedBy")
  updatedDiscounts    Discount[] @relation("DiscountUpdatedBy")
  createdCommunications Communication[] @relation("CommunicationCreatedBy")
  createdMarkingSchemes MarkingScheme[] @relation("MarkingSchemeCreatedBy")
  updatedMarkingSchemes MarkingScheme[] @relation("MarkingSchemeUpdatedBy")
  createdMarkingSchemeComponents MarkingSchemeComponent[] @relation("MarkingSchemeComponentCreatedBy")
  updatedMarkingSchemeComponents MarkingSchemeComponent[] @relation("MarkingSchemeComponentUpdatedBy")
  createdContinuousAssessments ContinuousAssessment[] @relation("ContinuousAssessmentCreatedBy")
  updatedContinuousAssessments ContinuousAssessment[] @relation("ContinuousAssessmentUpdatedBy")
  createdContinuousAssessmentComponents ContinuousAssessmentComponent[] @relation("ContinuousAssessmentComponentCreatedBy")
  updatedContinuousAssessmentComponents ContinuousAssessmentComponent[] @relation("ContinuousAssessmentComponentUpdatedBy")
  createdGradingSystems GradingSystem[] @relation("GradingSystemCreatedBy")
  updatedGradingSystems GradingSystem[] @relation("GradingSystemUpdatedBy")
  createdGrades       Grade[]    @relation("GradeCreatedBy")
  updatedGrades       Grade[]    @relation("GradeUpdatedBy")
  createdClassGradingSystems ClassGradingSystem[] @relation("ClassGradingSystemCreatedBy")
  updatedClassGradingSystems ClassGradingSystem[] @relation("ClassGradingSystemUpdatedBy")
  createdClassTermMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[] @relation("ClassTermMarkingSchemeAssignmentCreatedBy")
  updatedClassTermMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[] @relation("ClassTermMarkingSchemeAssignmentUpdatedBy")
  createdTeacherSubjectAssignments TeacherSubjectAssignment[] @relation("TeacherSubjectAssignmentCreatedBy")
  updatedTeacherSubjectAssignments TeacherSubjectAssignment[] @relation("TeacherSubjectAssignmentUpdatedBy")
  createdClassArmTeacherAssignments ClassArmTeacherAssignment[] @relation("ClassArmTeacherAssignmentCreatedBy")
  updatedClassArmTeacherAssignments ClassArmTeacherAssignment[] @relation("ClassArmTeacherAssignmentUpdatedBy")
  createdStudentScoreAssignments StudentScoreAssignment[] @relation("StudentScoreAssignmentCreatedBy")
  updatedStudentScoreAssignments StudentScoreAssignment[] @relation("StudentScoreAssignmentUpdatedBy")
  createdStudentTermRecords StudentTermRecord[] @relation("StudentTermRecordCreatedBy")
  updatedStudentTermRecords StudentTermRecord[] @relation("StudentTermRecordUpdatedBy")
  createdResultBatches ResultBatch[] @relation("ResultBatchCreatedBy")
  updatedResultBatches ResultBatch[] @relation("ResultBatchUpdatedBy")
  approvedResultBatchBy  ResultBatch[] @relation("ResultBatchApprovedBy")
  createdStudentResults StudentResult[] @relation("StudentResultCreatedBy")
  createdConfigurations Configuration[] @relation("ConfigurationCreatedBy")
  updatedConfigurations Configuration[] @relation("ConfigurationUpdatedBy")
  createdReportSheetSettings ReportSheetSetting[] @relation("ReportSheetSettingCreatedBy")
  updatedReportSheetSettings ReportSheetSetting[] @relation("ReportSheetSettingUpdatedBy")

  @@index([schoolId, email])
  @@index([schoolId, username])
  @@map("users")
}

// School model 
model School {
  id                             String                          @id @default(cuid())
  name                           String                          @unique
  email                          String                          @unique
  slug                           String                          @unique
  contact                        String                          @unique
  isActive                       Boolean                         @default(true)
  isDeleted                      Boolean                         @default(false)
  address                        String?
  subscriptionId                 String?                         @map("subscription_id")
  subscription                   Subscription?                   @relation("SubscriptionSchools", fields: [subscriptionId], references: [id])
  subscriptionExpiresAt          DateTime?                       @map("subscription_expires_at")
  subscriptionStatus             Boolean?                        @default(false) @map("subscription_status")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  createdBy                      String?                         @map("created_by")
  createdByUser                  User?                           @relation("SchoolCreatedBy", fields: [createdBy], references: [id])
  updatedBy                      String?                         @map("updated_by")
  updatedByUser                  User?                           @relation("SchoolUpdatedBy", fields: [updatedBy], references: [id])
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  users                          User[]
  subRoles                       SubRole[]
  subRolePermissions             SubRolePermission[]
  classGradingSystems            ClassGradingSystem[]
  markingSchemes                 MarkingScheme[]
  markingSchemeComponents        MarkingSchemeComponent[]
  continuousAssessments          ContinuousAssessment[]
  continuousAssessmentComponents ContinuousAssessmentComponent[]
  gradingSystems                 GradingSystem[]
  grades                         Grade[]
  logEntries                     LogEntry[]
  classes                        Class[]
  classArms                      ClassArm[]
  subjects                       Subject[]
  invoices                       Invoice[]
  communication                  Communication[]
  admissions                     Admission[]
  sessions                       Session[]
  currentSessionId               String?                         @map("current_session_id")
  currentSession                 Session?                        @relation("SchoolCurrentSession", fields: [currentSessionId], references: [id])
  currentTermId                  String?                         @map("current_term_id")
  currentTerm                    SessionTerm?                    @relation("SchoolCurrentTerm", fields: [currentTermId], references: [id])
  sessionClassAssignments        SessionClassAssignment[]
  classCategories                ClassCategory[]
  attendanceRecords              Attendance[]
  classAssignments               StudentClassAssignment[]
  subscriptionPayments           SubscriptionPayment[]
  termDefinitions                TermDefinition[]
  sessionTerms                   SessionTerm[]
  classTermMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[]
  teacherAssignments             TeacherSubjectAssignment[]
  classArmTeacherAssignments     ClassArmTeacherAssignment[]
  scores                         StudentScoreAssignment[]
  termRecords                    StudentTermRecord[]             @relation("SchoolTermRecords")
  resultBatches                  ResultBatch[]
  studentResults                 StudentResult[]
  configuration                  Configuration?                  @relation("SchoolConfiguration")
  studentSubjectAssignments      StudentSubjectAssignment[]
  classArmSubjectAssignments     ClassArmSubjectAssignment[]
  reportSheetSettings            ReportSheetSetting[]
  studentInvoiceAssignments      StudentInvoiceAssignment[]
  discounts                      Discount[]

  @@index([email])
  @@map("schools")
}

// Staff model 
model Staff {
  id             String    @id @default(cuid())
  userId         String    @unique @map("user_id")
  user           User      @relation("UserToStaff", fields: [userId], references: [id])
  staffRegNo     String?   @unique @map("staff_reg_no")
  hireDate       DateTime? @map("hire_date")
  qualifications Json?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by")
  createdByUser  User?     @relation("StaffCreatedBy", fields: [createdBy], references: [id])
  updatedBy      String?   @map("updated_by")
  updatedByUser  User?     @relation("StaffUpdatedBy", fields: [updatedBy], references: [id])
  isDeleted      Boolean   @default(false) @map("is_deleted")
  teacherAssignments TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]

  @@map("staff")
}

// Student 
model Student {
  id                 String                     @id @default(cuid())
  userId             String                     @unique @map("user_id")
  user               User                       @relation("UserToStudent", fields: [userId], references: [id])
  studentRegNo       String?                    @unique @map("student_reg_no")
  dateOfBirth        DateTime?                  @map("date_of_birth")
  religion           String?
  nationality        String?
  stateOfOrigin      String?                    @map("state_of_origin")
  lga                String?
  parentId           String?                    @map("parent_id")
  parent             Parent?                    @relation(fields: [parentId], references: [id])
  classId            String?                    @map("class_id")
  class              Class?                     @relation("StudentClass", fields: [classId], references: [id])
  classArmId         String?                    @map("class_arm_id")
  classArm           ClassArm?                  @relation("ArmStudents", fields: [classArmId], references: [id])
  subjects           StudentSubjectAssignment[]
  yearOfGraduation   DateTime?                  @map("year_of_graduation")
  admission          Admission?                 @relation("StudentToAdmission")
  admissionStatus    AdmissionStatus            @default(pending) @map("admission_status")
  admissionDate      DateTime?                  @map("admission_date")
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  createdBy          String?                    @map("created_by")
  createdByUser      User?                      @relation("StudentCreatedBy", fields: [createdBy], references: [id])
  updatedBy          String?                    @map("updated_by")
  updatedByUser      User?                      @relation("StudentUpdatedBy", fields: [updatedBy], references: [id])
  isAlumni           Boolean                    @default(false) @map("is_alumni")
  isDeleted          Boolean                    @default(false) @map("is_deleted")
attendanceRecords  Attendance[]               @relation("StudentAttendance")
  classAssignments   StudentClassAssignment[]   @relation("StudentClassAssignment")
  invoiceAssignments StudentInvoiceAssignment[]
  scores             StudentScoreAssignment[]
  termRecords        StudentTermRecord[]        @relation("StudentTermRecords")
  studentResults     StudentResult[]

  @@map("students")
}

// Parent model 
model Parent {
  id           String    @id @default(cuid())
  userId       String    @unique @map("user_id")
  user         User      @relation("UserToParent", fields: [userId], references: [id])
  occupation   String?
  relationship String?
  students     Student[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy    String?   @map("created_by")
  createdByUser User?    @relation("ParentCreatedBy", fields: [createdBy], references: [id])
  updatedBy    String?   @map("updated_by")
  updatedByUser User?    @relation("ParentUpdatedBy", fields: [updatedBy], references: [id])
  isDeleted    Boolean   @default(false) @map("is_deleted")
  admissions   Admission[]

  @@map("parents")
}

// Class model 
model Class {
  id                         String                             @id @default(cuid())
  name                       String
  schoolId                   String                             @map("school_id")
  school                     School                             @relation(fields: [schoolId], references: [id])
  classCategoryId            String?                            @map("class_category_id")
  classCategory              ClassCategory?                     @relation(fields: [classCategoryId], references: [id])
  students                   Student[]                          @relation("StudentClass")
  isDeleted                  Boolean                            @default(false)
  isActive                   Boolean                            @default(true)
  createdAt                  DateTime                           @default(now()) @map("created_at")
  updatedAt                  DateTime                           @updatedAt @map("updated_at")
  createdBy                  String?                            @map("created_by")
  createdByUser              User?                              @relation("ClassCreatedBy", fields: [createdBy], references: [id])
  updatedBy                  String?                            @map("updated_by")
  updatedByUser              User?                              @relation("ClassUpdatedBy", fields: [updatedBy], references: [id])
  admissionsPresentClass     Admission[]                        @relation("PresentClass")
  admissionsClassToApply     Admission[]                        @relation("ClassToApply")
  admissionsAssignedClass    Admission[]                        @relation("AssignedClass")
  invoices                   Invoice[]
  sessionClassAssignments    SessionClassAssignment[]
  classArmSubjects           ClassArmSubjectAssignment[]
  attendanceRecords          Attendance[]
  gradingSystems             ClassGradingSystem[]
  termAssignments            ClassTermMarkingSchemeAssignment[]
  teacherAssignments         TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]
  classAssignments           StudentClassAssignment[]
  scores                     StudentScoreAssignment[]
  termRecords                StudentTermRecord[]                @relation("ClassTermRecords")
  resultBatches              ResultBatch[]
  reportSheetSetting         ReportSheetSetting[]

  @@unique([name, schoolId])
  @@index([schoolId, classCategoryId])
  @@map("classes")
}

// ClassCategory model 
model ClassCategory {
  id            String    @id @default(cuid())
  name          String
  isActive      Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  createdBy     String?   @map("created_by")
  createdByUser User?     @relation("ClassCategoryCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?   @map("updated_by")
  updatedByUser User?     @relation("ClassCategoryUpdatedBy", fields: [updatedBy], references: [id])
  schoolId      String    @map("school_id")
  school        School    @relation(fields: [schoolId], references: [id])
  classes       Class[]

  @@index([schoolId])
  @@map("class_categories")
}

// ClassArm model 
model ClassArm {
  id                         String                      @id @default(cuid())
  name                       String
  schoolId                   String                      @map("school_id")
  school                     School                      @relation(fields: [schoolId], references: [id])
  isDeleted                  Boolean                     @default(false)
  isActive                   Boolean                     @default(true)
  students                   Student[]                   @relation("ArmStudents")
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  createdBy                  String?                     @map("created_by")
  createdByUser              User?                       @relation("ClassArmCreatedBy", fields: [createdBy], references: [id])
  updatedBy                  String?                     @map("updated_by")
  updatedByUser              User?                       @relation("ClassArmUpdatedBy", fields: [updatedBy], references: [id])
  admissionsAssignedClassArm Admission[]                 @relation("AssignedClassArm")
  sessionClassAssignments    SessionClassAssignment[]
  classArmSubjects           ClassArmSubjectAssignment[]
  attendanceRecords          Attendance[]
  invoices                   Invoice[]
  teacherAssignments         TeacherSubjectAssignment[]
  classArmTeacherAssignments ClassArmTeacherAssignment[]
  classAssignments           StudentClassAssignment[]
  scores                     StudentScoreAssignment[]
  termRecords                StudentTermRecord[]         @relation("ClassArmTermRecords")
  resultBatches              ResultBatch[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("class_arms")
}

// Admission model 
model Admission {
  id                 String    @id @default(cuid())
  sessionId          String    @map("session_id")
  session            Session   @relation("SessionAdmissions", fields: [sessionId], references: [id])
  schoolId           String    @map("school_id")
  school             School    @relation(fields: [schoolId], references: [id])
  studentId          String    @unique @map("student_id")
  student            Student   @relation("StudentToAdmission", fields: [studentId], references: [id])
  parentId           String?   @map("parent_id")
  parent             Parent?   @relation(fields: [parentId], references: [id])
  presentClassId     String?   @map("present_class_id")
  presentClass       Class?    @relation("PresentClass", fields: [presentClassId], references: [id])
  classApplyingTo    String?   @map("class_applying_to")
  classToApply       Class?    @relation("ClassToApply", fields: [classApplyingTo], references: [id])
  assignedClassId    String?   @map("assigned_class_id")
  assignedClass      Class?    @relation("AssignedClass", fields: [assignedClassId], references: [id])
  assignedClassArmId String?   @map("assigned_class_arm_id")
  assignedClassArm   ClassArm? @relation("AssignedClassArm", fields: [assignedClassArmId], references: [id])
  formerSchoolName    String? @map("former_school_name")
  formerSchoolAddress String? @map("former_school_address")
  formerSchoolContact String? @map("former_school_contact")
  healthProblems      String? @map("health_problems")
  howHeardAboutUs     String? @map("how_heard_about_us")
  admissionStatus     AdmissionStatus @default(pending) @map("admission_status")
  admissionDate       DateTime?       @map("admission_date")
  rejectionReason     String?         @map("rejection_reason")
  isDeleted           Boolean         @default(false)
  createdAt           DateTime?       @default(now()) @map("created_at")
  updatedAt           DateTime?       @updatedAt @map("updated_at")
  createdBy           String?         @map("created_by")
  createdByUser       User?           @relation("AdmissionCreatedBy", fields: [createdBy], references: [id])
  updatedBy           String?         @map("updated_by")
  updatedByUser       User?           @relation("AdmissionUpdatedBy", fields: [updatedBy], references: [id])

  @@index([schoolId, studentId, sessionId])
  @@map("admissions")
}

// Session model 
model Session {
  id                     String                     @id @default(cuid())
  name                   String
  schoolId               String                     @map("school_id")
  school                 School                     @relation(fields: [schoolId], references: [id])
  terms                  SessionTerm[]
  schools                School[]                   @relation("SchoolCurrentSession")
  isActive               Boolean                    @default(false)
  isDeleted              Boolean                    @default(false)
  admissions             Admission[]                @relation("SessionAdmissions")
  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @updatedAt @map("updated_at")
  createdBy              String?                    @map("created_by")
  createdByUser          User?                      @relation("SessionCreatedBy", fields: [createdBy], references: [id])
  updatedBy              String?                    @map("updated_by")
  updatedByUser          User?                      @relation("SessionUpdatedBy", fields: [updatedBy], references: [id])
  classAssignments       SessionClassAssignment[]
  attendanceRecords      Attendance[]
  scores                 StudentScoreAssignment[]   @relation("SessionScores")
  termRecords            StudentTermRecord[]        @relation("SessionTermRecords")
  studentSubjects        StudentSubjectAssignment[]
  resultBatches          ResultBatch[]
  studentClassAssignments StudentClassAssignment[]
  invoices               Invoice[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("sessions")
}

// TermDefinition model
model TermDefinition {
  id                            String                             @id @default(cuid())
  name                          TermEnum
  schoolId                      String                             @map("school_id")
  school                        School                             @relation(fields: [schoolId], references: [id])
  sessionTerms                  SessionTerm[]
  classMarkingSchemeAssignments ClassTermMarkingSchemeAssignment[]
  createdAt                     DateTime?                          @default(now()) @map("created_at")
  updatedAt                     DateTime?                          @updatedAt @map("updated_at")
  createdBy                     String?                            @map("created_by")
  createdByUser                 User?                              @relation("TermDefinitionCreatedBy", fields: [createdBy], references: [id])
  updatedBy                     String?                            @map("updated_by")
  updatedByUser                 User?                              @relation("TermDefinitionUpdatedBy", fields: [updatedBy], references: [id])
  scores                        StudentScoreAssignment[]           @relation("TermScores")
  termRecords                   StudentTermRecord[]                @relation("TermRecords")
  resultBatches                 ResultBatch[]
  invoices                      Invoice[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("term_definitions")
}

// SessionTerm model
model SessionTerm {
  id                String         @id @default(cuid())
  termDefinitionId  String         @map("term_definition_id")
  termDefinition    TermDefinition @relation(fields: [termDefinitionId], references: [id])
  sessionId         String         @map("session_id")
  session           Session        @relation(fields: [sessionId], references: [id])
  startDate         DateTime
  endDate           DateTime
  schoolId          String         @map("school_id")
  school            School         @relation(fields: [schoolId], references: [id])
  isActive          Boolean        @default(false)
  isDeleted         Boolean        @default(false)
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdBy         String?        @map("created_by")
  createdByUser     User?          @relation("SessionTermCreatedBy", fields: [createdBy], references: [id])
  updatedBy         String?        @map("updated_by")
  updatedByUser     User?          @relation("SessionTermUpdatedBy", fields: [updatedBy], references: [id])
  attendanceRecords Attendance[]   @relation("TermAttendance")
  currentSchools    School[]       @relation("SchoolCurrentTerm")

  @@unique([sessionId, termDefinitionId])
  @@index([schoolId, sessionId, termDefinitionId])
  @@map("session_terms")
}

model SessionClassAssignment {
  id            String    @id @default(cuid())
  sessionId     String    @map("session_id") @db.VarChar(50)
  classId       String    @map("class_id") @db.VarChar(50)
  classArmId    String    @map("class_arm_id") @db.VarChar(50)
  schoolId      String    @map("school_id") @db.VarChar(50)
  session       Session   @relation(fields: [sessionId], references: [id])
  class         Class     @relation(fields: [classId], references: [id])
  classArm      ClassArm  @relation(fields: [classArmId], references: [id])
  school        School    @relation(fields: [schoolId], references: [id])
  isDeleted     Boolean   @default(false)
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  createdBy     String?   @map("created_by") @db.VarChar(50)
  createdByUser User?     @relation("SessionClassAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?   @map("updated_by") @db.VarChar(50)
  updatedByUser User?     @relation("SessionClassAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([sessionId, classId, classArmId, schoolId])
  @@index([schoolId, sessionId])
}

// Subject model
model Subject {
  id                 String                      @id @default(cuid())
  name               String
  code               String
  schoolId           String                      @map("school_id")
  isDeleted          Boolean                     @default(false)
  school             School                      @relation(fields: [schoolId], references: [id])
  studentSubjects    StudentSubjectAssignment[]  @relation("SubjectStudents")
  createdAt          DateTime?                   @default(now()) @map("created_at")
  updatedAt          DateTime?                   @updatedAt @map("updated_at")
  createdBy          String?                     @map("created_by")
  createdByUser      User?                       @relation("SubjectCreatedBy", fields: [createdBy], references: [id])
  updatedBy          String?                     @map("updated_by")
  updatedByUser      User?                       @relation("SubjectUpdatedBy", fields: [updatedBy], references: [id])
  classArmSubjects   ClassArmSubjectAssignment[] @relation("SubjectAssignments")
  teacherAssignments TeacherSubjectAssignment[]
  scores             StudentScoreAssignment[]
  studentResults     StudentResult[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("subjects")
}

// StudentSubjectAssignment model
model StudentSubjectAssignment {
  id                        String                     @id @default(cuid())
  studentId                 String                     @map("student_id")
  subjectId                 String                     @map("subject_id")
  schoolId                  String                     @map("school_id")
  sessionId                 String                     @map("session_id")
  student                   Student                    @relation(fields: [studentId], references: [id])
  subject                   Subject                    @relation("SubjectStudents", fields: [subjectId], references: [id])
  school                    School                     @relation(fields: [schoolId], references: [id])
  session                   Session                    @relation(fields: [sessionId], references: [id])
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  createdBy                 String?                    @map("created_by")
  createdByUser             User?                      @relation("StudentSubjectAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy                 String?                    @map("updated_by")
  updatedByUser             User?                      @relation("StudentSubjectAssignmentUpdatedBy", fields: [updatedBy], references: [id])
  classArmSubjectId         String                     @map("class_arm_subject_id")
  classArmSubjectAssignment ClassArmSubjectAssignment? @relation(fields: [classArmSubjectId], references: [id])

  @@unique([studentId, subjectId, schoolId])
  @@index([schoolId, studentId])
  @@map("student_subjects")
}

model ClassArmSubjectAssignment {
  id                        String                     @id @default(cuid())
  classId                   String                     @map("class_id")
  classArmId                String                     @map("class_arm_id")
  subjectId                 String                     @map("subject_id")
  schoolId                  String                     @map("school_id")
  class                     Class                      @relation(fields: [classId], references: [id])
  classArm                  ClassArm                   @relation(fields: [classArmId], references: [id])
  subject                   Subject                    @relation("SubjectAssignments", fields: [subjectId], references: [id])
  school                    School                     @relation(fields: [schoolId], references: [id])
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  createdBy                 String?                    @map("created_by")
  createdByUser             User?                      @relation("ClassArmSubjectAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy                 String?                    @map("updated_by")
  updatedByUser             User?                      @relation("ClassArmSubjectAssignmentUpdatedBy", fields: [updatedBy], references: [id])
  teacherAssignments        TeacherSubjectAssignment[]
  studentSubjectAssignments StudentSubjectAssignment[]

  @@unique([classId, classArmId, subjectId, schoolId])
  @@index([schoolId, classId, classArmId])
  @@map("class_arm_subjects_assignment")
}

// Permission model
model Permission {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String?
  isDeleted          Boolean             @default(false)
  scope              PermissionScope     @default(school)
  subRoleAssignments SubRolePermission[] @relation("PermissionAssignments")
  createdAt          DateTime?           @default(now()) @map("created_at")
  updatedAt          DateTime?           @updatedAt @map("updated_at")
  createdBy          String?             @map("created_by")
  createdByUser      User?               @relation("PermissionCreatedBy", fields: [createdBy], references: [id])
  updatedBy          String?             @map("updated_by")
  updatedByUser      User?               @relation("PermissionUpdatedBy", fields: [updatedBy], references: [id])

  @@map("permissions")
}

// SubRole model
model SubRole {
  id            String              @id @default(cuid())
  name          String
  schoolId      String?             @map("school_id")
  school        School?             @relation(fields: [schoolId], references: [id])
  description   String?
  isGlobal      Boolean             @default(false)
  permissions   SubRolePermission[] @relation("RoleAssignments")
  users         User[]              @relation("UserRoles")
  isDeleted     Boolean?            @default(false)
  scope         PermissionScope     @default(school)
  createdAt     DateTime?           @default(now()) @map("created_at")
  updatedAt     DateTime?           @updatedAt @map("updated_at")
  createdBy     String?             @map("created_by")
  createdByUser User?               @relation("SubRoleCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?             @map("updated_by")
  updatedByUser User?               @relation("SubRoleUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("sub_roles")
}

model SubRolePermission {
  id            String     @id @default(cuid())
  subRoleId     String     @map("sub_role_id")
  permissionId  String     @map("permission_id")
  schoolId      String?    @map("school_id")
  school        School?    @relation(fields: [schoolId], references: [id])
  subRole       SubRole    @relation("RoleAssignments", fields: [subRoleId], references: [id])
  permission    Permission @relation("PermissionAssignments", fields: [permissionId], references: [id])
  createdAt     DateTime?  @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")
  createdBy     String?    @map("created_by")
  createdByUser User?      @relation("SubRolePermissionCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?    @map("updated_by")
  updatedByUser User?      @relation("SubRolePermissionUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([subRoleId, permissionId, schoolId])
  @@index([schoolId, subRoleId])
  @@map("sub_role_permissions")
}

// Subscription model
model Subscription {
  id           String                @id @default(cuid())
  name         String                @unique
  amount       Int?
  studentLimit Int?
  duration     Int?
  schools      School[]              @relation("SubscriptionSchools")
  isDeleted    Boolean               @default(false)
  isActive     Boolean               @default(true)
  features     Json?
  createdAt    DateTime?             @default(now()) @map("created_at")
  updatedAt    DateTime?             @updatedAt @map("updated_at")
  createdBy    String?               @map("created_by")
  createdByUser User?                @relation("SubscriptionCreatedBy", fields: [createdBy], references: [id])
  updatedBy    String?               @map("updated_by")
  updatedByUser User?                @relation("SubscriptionUpdatedBy", fields: [updatedBy], references: [id])
  payments     SubscriptionPayment[] @relation("SubscriptionPayments")

  @@map("subscriptions")
}

model Attendance {
  id            String           @id @default(cuid())
  studentId     String           @map("student_id") @db.VarChar(50)
  schoolId      String           @map("school_id") @db.VarChar(50)
  sessionId     String           @map("session_id") @db.VarChar(50)
  termId        String           @map("term_id") @db.VarChar(50)
  classId       String           @map("class_id") @db.VarChar(50)
  classArmId    String           @map("class_arm_id") @db.VarChar(50)
  status        AttendanceStatus @default(present)
  date          DateTime
  createdAt     DateTime?        @default(now()) @map("created_at")
  updatedAt     DateTime?        @updatedAt @map("updated_at")
  createdBy     String?          @map("created_by") @db.VarChar(50)
  createdByUser User?            @relation("AttendanceCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?          @map("updated_by") @db.VarChar(50)
  updatedByUser User?            @relation("AttendanceUpdatedBy", fields: [updatedBy], references: [id])
  student       Student          @relation("StudentAttendance", fields: [studentId], references: [id])
  school        School           @relation(fields: [schoolId], references: [id])
  session       Session          @relation(fields: [sessionId], references: [id])
  term          SessionTerm      @relation("TermAttendance", fields: [termId], references: [id])
  class         Class            @relation(fields: [classId], references: [id])
  classArm      ClassArm         @relation(fields: [classArmId], references: [id])

  @@unique([studentId, date, schoolId, sessionId, termId])
  @@index([studentId, date])
  @@index([schoolId, sessionId, termId])
}

model StudentClassAssignment {
  id                       String                   @id @default(cuid())
  studentId                String                   @map("student_id")
  sessionId                String                   @map("session_id")
  classId                  String                   @map("class_id")
  classArmId               String                   @map("class_arm_id")
  schoolId                 String                   @map("school_id")
  isActive                 Boolean                  @default(true)
  promotedFromAssignmentId String?                  @map("promoted_from_assignment_id")
  promotedFromAssignment   StudentClassAssignment?  @relation("PromotionHistory", fields: [promotedFromAssignmentId], references: [id])
  promotedToAssignments    StudentClassAssignment[] @relation("PromotionHistory")
  createdAt                DateTime?                @default(now()) @map("created_at")
  updatedAt                DateTime?                @updatedAt @map("updated_at")
  createdBy                String?                  @map("created_by")
  createdByUser            User?                    @relation("StudentClassAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy                String?                  @map("updated_by")
  updatedByUser            User?                    @relation("StudentClassAssignmentUpdatedBy", fields: [updatedBy], references: [id])
  student                  Student                  @relation("StudentClassAssignment", fields: [studentId], references: [id])
  session                  Session                  @relation(fields: [sessionId], references: [id])
  class                    Class                    @relation(fields: [classId], references: [id])
  classArm                 ClassArm                 @relation(fields: [classArmId], references: [id])
  school                   School                   @relation(fields: [schoolId], references: [id])

  @@unique([studentId, sessionId, schoolId])
  @@index([studentId, sessionId])
  @@index([classId, classArmId, schoolId])
  @@map("student_class_assignments")
}

model LogEntry {
  id            String    @id @default(cuid())
  action        String
  target        String?
  targetId      String?
  isDeleted     Boolean   @default(false)
  userId        String?   @map("user_id") @db.VarChar(191)
  schoolId      String?   @map("school_id") @db.VarChar(191)
  meta          Json?
  timestamp     DateTime? @default(now())
  ipAddress     String?   @map("ip_address")
  device        String?
  location      String?
  user          User?     @relation(fields: [userId], references: [id])
  school        School?   @relation(fields: [schoolId], references: [id])
  createdBy     String?   @map("created_by")
  createdByUser User?     @relation("LogEntryCreatedBy", fields: [createdBy], references: [id])

  @@index([userId, schoolId])
  @@map("log_entries")
}

model SubscriptionPayment {
  id             String        @id @default(cuid())
  schoolId       String        @map("school_id")
  subscriptionId String        @map("subscription_id")
  school         School        @relation(fields: [schoolId], references: [id])
  subscription   Subscription  @relation("SubscriptionPayments", fields: [subscriptionId], references: [id])
  amount         Float
  reference      String?
  paymentMethod  String?       @map("payment_method")
  paymentStatus  PaymentStatus @default(pending) @map("payment_status")
  paymentDate    DateTime?     @map("payment_date")
  createdAt      DateTime?     @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  createdBy      String?       @map("created_by")
  createdByUser  User?         @relation("SubscriptionPaymentCreatedBy", fields: [createdBy], references: [id])

  @@index([schoolId, subscriptionId])
  @@map("subscription_payments")
}

model Invoice {
  id                       String                     @id @default(cuid())
  schoolId                 String                     @map("school_id")
  school                   School                     @relation(fields: [schoolId], references: [id])
  classId                  String?                    @map("class_id")
  class                    Class?                     @relation(fields: [classId], references: [id])
  classArmId               String?                    @map("class_arm_id")
  classArm                 ClassArm?                  @relation(fields: [classArmId], references: [id])
  termId                   String                     @map("term_id")
  term                     TermDefinition             @relation(fields: [termId], references: [id])
  sessionId                String                     @map("session_id")
  session                  Session                    @relation(fields: [sessionId], references: [id])
  amount                   Float
  title                    String
  description              String?
  reference                String
  isDeleted               Boolean                    @default(false)
  type                     InvoiceType                @default(single)
  // outstanding              Float?
  // dueDate                  DateTime?                  @map("due_date")
  // paid                     Float?
  // status                   InvoiceStatus              @default(submitted)
  // paymentReceipt           String?                    @map("payment_receipt")
  // issuedDate               DateTime                   @map("issued_date")
  createdAt                DateTime?                  @default(now()) @map("created_at")
  updatedAt                DateTime?                  @updatedAt @map("updated_at")
  createdBy                String?                    @map("created_by")
  createdByUser            User?                      @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  // paymentEvidence          String?
  studentInvoiceAssignments StudentInvoiceAssignment[]
  discounts                Discount[]

  @@index([schoolId])
  @@map("invoices")
}

model StudentInvoiceAssignment {
  id            String        @id @default(cuid())
  invoiceId     String        @map("invoice_id")
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  studentId     String        @map("student_id")
  student       Student       @relation(fields: [studentId], references: [id])
  schoolId      String        @map("school_id")
  school        School        @relation(fields: [schoolId], references: [id])
  status        InvoiceStatus @default(submitted)
  paid          Float?
  outstanding   Float?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  createdBy     String?       @map("created_by")
  createdByUser User?         @relation("StudentInvoiceAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?       @map("updated_by")
  updatedByUser User?         @relation("StudentInvoiceAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([invoiceId, studentId, schoolId])
  @@index([studentId, invoiceId])
  @@map("student_invoice_assignments")
}

model Discount {
  id            String         @id @default(cuid())
  invoiceId     String         @map("invoice_id")
  invoice       Invoice        @relation(fields: [invoiceId], references: [id])
  schoolId      String         @map("school_id")
  school        School         @relation(fields: [schoolId], references: [id])
  amount        Float
  dueDate       DateTime       @map("due_date")
  status        DiscountStatus @default(pending)
  approvedById  String?        @map("approved_by")
  approvedBy    User?          @relation("DiscountApprovedBy", fields: [approvedById], references: [id])
  approvedAt    DateTime?
  createdBy     String?        @map("created_by")
  createdByUser User?          @relation("DiscountCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?        @map("updated_by")
  updatedByUser User?          @relation("DiscountUpdatedBy", fields: [updatedBy], references: [id])
  createdAt     DateTime?      @default(now()) @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  isDeleted     Boolean        @default(false)

  @@index([invoiceId, schoolId])
  @@map("discounts")
}

model Communication {
  id               String    @id @default(cuid())
  name             String
  startDate        DateTime  @map("start_date")
  endDate          DateTime  @map("end_date")
  eventColor       String    @map("event_color")
  eventDescription String    @map("event_description")
  schoolId         String    @map("school_id")
  school           School    @relation(fields: [schoolId], references: [id])
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")
  createdBy        String?   @map("created_by")
  createdByUser    User?     @relation("CommunicationCreatedBy", fields: [createdBy], references: [id])

  @@index([schoolId])
  @@map("communications")
}

model MarkingScheme {
  id               String                             @id @default(cuid())
  name             String
  schoolId         String                             @map("school_id")
  school           School                             @relation(fields: [schoolId], references: [id])
  components       MarkingSchemeComponent[]           @relation("SchemeComponents")
  classAssignments ClassTermMarkingSchemeAssignment[] @relation("SchemeAssignments")
  createdAt        DateTime?                          @default(now()) @map("created_at")
  updatedAt        DateTime?                          @updatedAt @map("updated_at")
  createdBy        String?                            @map("created_by")
  createdByUser    User?                              @relation("MarkingSchemeCreatedBy", fields: [createdBy], references: [id])
  updatedBy        String?                            @map("updated_by")
  updatedByUser    User?                              @relation("MarkingSchemeUpdatedBy", fields: [updatedBy], references: [id])
  isDeleted        Boolean                            @default(false)

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("marking_schemes")
}

model MarkingSchemeComponent {
  id                    String                   @id @default(cuid())
  markingSchemeId       String                   @map("marking_scheme_id")
  markingScheme         MarkingScheme            @relation("SchemeComponents", fields: [markingSchemeId], references: [id])
  name                  String
  score                 Int
  type                  AssessmentType
  schoolId              String                   @map("school_id")
  school                School                   @relation(fields: [schoolId], references: [id])
  continuousAssessments ContinuousAssessment[]   @relation("ComponentAssessments")
  scores                StudentScoreAssignment[] @relation("ComponentScores")
  createdAt             DateTime?                @default(now()) @map("created_at")
  updatedAt             DateTime?                @updatedAt @map("updated_at")
  createdBy             String?                  @map("created_by")
  createdByUser         User?                    @relation("MarkingSchemeComponentCreatedBy", fields: [createdBy], references: [id])
  updatedBy             String?                  @map("updated_by")
  updatedByUser         User?                    @relation("MarkingSchemeComponentUpdatedBy", fields: [updatedBy], references: [id])
  isDeleted             Boolean                  @default(false)
  resultBatches         ResultBatch[]            @relation("BatchResultType")

  @@unique([markingSchemeId, name])
  @@index([schoolId, markingSchemeId])
  @@map("marking_scheme_components")
}

model ContinuousAssessment {
  id                       String                          @id @default(cuid())
  markingSchemeComponentId String                          @map("marking_scheme_component_id")
  markingSchemeComponent   MarkingSchemeComponent          @relation("ComponentAssessments", fields: [markingSchemeComponentId], references: [id])
  schoolId                 String                          @map("school_id")
  school                   School                          @relation(fields: [schoolId], references: [id])
  components               ContinuousAssessmentComponent[] @relation("AssessmentComponents")
  scores                   StudentScoreAssignment[]        @relation("AssessmentScores")
  createdAt                DateTime?                       @default(now()) @map("created_at")
  updatedAt                DateTime?                       @updatedAt @map("updated_at")
  createdBy                String?                         @map("created_by")
  createdByUser            User?                           @relation("ContinuousAssessmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy                String?                         @map("updated_by")
  updatedByUser            User?                           @relation("ContinuousAssessmentUpdatedBy", fields: [updatedBy], references: [id])
  isDeleted                Boolean                         @default(false)

  @@unique([markingSchemeComponentId, schoolId])
  @@index([schoolId, markingSchemeComponentId])
  @@map("continuous_assessments")
}

model ContinuousAssessmentComponent {
  id                     String                   @id @default(cuid())
  continuousAssessmentId String                   @map("continuous_assessment_id")
  continuousAssessment   ContinuousAssessment     @relation("AssessmentComponents", fields: [continuousAssessmentId], references: [id])
  schoolId               String                   @map("school_id")
  school                 School                   @relation(fields: [schoolId], references: [id])
  name                   String
  score                  Int
  createdAt              DateTime?                @default(now()) @map("created_at")
  updatedAt              DateTime?                @updatedAt @map("updated_at")
  createdBy              String?                  @map("created_by")
  createdByUser          User?                    @relation("ContinuousAssessmentComponentCreatedBy", fields: [createdBy], references: [id])
  updatedBy              String?                  @map("updated_by")
  updatedByUser          User?                    @relation("ContinuousAssessmentComponentUpdatedBy", fields: [updatedBy], references: [id])
  scores                 StudentScoreAssignment[] @relation("ComponentScores")
  isDeleted              Boolean                  @default(false)

  @@unique([continuousAssessmentId, name])
  @@index([schoolId, continuousAssessmentId])
  @@map("continuous_assessment_components")
}

model GradingSystem {
  id               String               @id @default(cuid())
  name             String
  schoolId         String               @map("school_id")
  school           School               @relation(fields: [schoolId], references: [id])
  grades           Grade[]              @relation("SystemGrades")
  classAssignments ClassGradingSystem[] @relation("SystemAssignments")
  isDeleted        Boolean              @default(false)
  createdAt        DateTime?            @default(now()) @map("created_at")
  updatedAt        DateTime?            @updatedAt @map("updated_at")
  createdBy        String?              @map("created_by")
  createdByUser    User?                @relation("GradingSystemCreatedBy", fields: [createdBy], references: [id])
  updatedBy        String?              @map("updated_by")
  updatedByUser    User?                @relation("GradingSystemUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("grading_systems")
}

model Grade {
  id               String          @id @default(cuid())
  gradingSystemId  String          @map("grading_system_id")
  gradingSystem    GradingSystem   @relation("SystemGrades", fields: [gradingSystemId], references: [id])
  schoolId         String          @map("school_id")
  school           School          @relation(fields: [schoolId], references: [id])
  name             String
  scoreStartPoint  Int             @map("score_start_point")
  scoreEndPoint    Int             @map("score_end_point")
  remark           String?
  teacherComment   String?         @map("teacher_comment")
  principalComment String?         @map("principal_comment")
  isDeleted        Boolean         @default(false)
  createdAt        DateTime?       @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")
  createdBy        String?         @map("created_by")
  createdByUser    User?           @relation("GradeCreatedBy", fields: [createdBy], references: [id])
  updatedBy        String?         @map("updated_by")
  updatedByUser    User?           @relation("GradeUpdatedBy", fields: [updatedBy], references: [id])
  studentResults   StudentResult[]

  @@unique([gradingSystemId, name])
  @@index([schoolId, gradingSystemId])
  @@map("grades")
}

model ClassGradingSystem {
  id              String        @id @default(cuid())
  gradingSystemId String        @map("grading_system_id")
  gradingSystem   GradingSystem @relation("SystemAssignments", fields: [gradingSystemId], references: [id])
  classId         String        @map("class_id")
  class           Class         @relation(fields: [classId], references: [id])
  schoolId        String        @map("school_id")
  school          School        @relation(fields: [schoolId], references: [id])
  isDeleted       Boolean       @default(false)
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  createdBy       String?       @map("created_by")
  createdByUser   User?         @relation("ClassGradingSystemCreatedBy", fields: [createdBy], references: [id])
  updatedBy       String?       @map("updated_by")
  updatedByUser   User?         @relation("ClassGradingSystemUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([classId, schoolId])
  @@index([schoolId, classId, gradingSystemId])
  @@map("class_grading_systems")
}

model ClassTermMarkingSchemeAssignment {
  id               String         @id @default(cuid())
  markingSchemeId  String         @map("marking_scheme_id")
  markingScheme    MarkingScheme  @relation("SchemeAssignments", fields: [markingSchemeId], references: [id])
  classId          String         @map("class_id")
  class            Class          @relation(fields: [classId], references: [id])
  termDefinitionId String         @map("term_definition_id")
  termDefinition   TermDefinition @relation(fields: [termDefinitionId], references: [id])
  schoolId         String         @map("school_id")
  school           School         @relation(fields: [schoolId], references: [id])
  isDeleted        Boolean        @default(false)
  createdAt        DateTime?      @default(now()) @map("created_at")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  createdBy        String?        @map("created_by")
  createdByUser    User?          @relation("ClassTermMarkingSchemeAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy        String?        @map("updated_by")
  updatedByUser    User?          @relation("ClassTermMarkingSchemeAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([classId, termDefinitionId, schoolId])
  @@index([schoolId, classId, termDefinitionId])
  @@map("class_term_marking_scheme_assignments")
}

model TeacherSubjectAssignment {
  id                String                     @id @default(cuid())
  staffId           String                     @map("staff_id") @db.VarChar(50)
  subjectId         String                     @map("subject_id") @db.VarChar(50)
  classId           String                     @map("class_id") @db.VarChar(50)
  classArmId        String                     @map("class_arm_id") @db.VarChar(50)
  schoolId          String                     @map("school_id") @db.VarChar(50)
  staff             Staff                      @relation(fields: [staffId], references: [id])
  subject           Subject                    @relation(fields: [subjectId], references: [id])
  class             Class                      @relation(fields: [classId], references: [id])
  classArm          ClassArm                   @relation(fields: [classArmId], references: [id])
  school            School                     @relation(fields: [schoolId], references: [id])
  classArmSubjectId String?                    @map("class_arm_subject_id") @db.VarChar(50)
  classArmSubject   ClassArmSubjectAssignment? @relation(fields: [classArmSubjectId], references: [id])
  isDeleted         Boolean                    @default(false)
  createdAt         DateTime?                  @default(now()) @map("created_at")
  updatedAt         DateTime?                  @updatedAt @map("updated_at")
  createdBy         String?                    @map("created_by") @db.VarChar(50)
  createdByUser     User?                      @relation("TeacherSubjectAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy         String?                    @map("updated_by") @db.VarChar(50)
  updatedByUser     User?                      @relation("TeacherSubjectAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([staffId, subjectId, classId, classArmId])
  @@index([schoolId, staffId])
}

model ClassArmTeacherAssignment {
  id            String   @id @default(cuid())
  staffId       String   @map("staff_id")
  staff         Staff    @relation(fields: [staffId], references: [id])
  classId       String   @map("class_id")
  class         Class    @relation(fields: [classId], references: [id])
  classArmId    String   @map("class_arm_id")
  classArm      ClassArm @relation(fields: [classArmId], references: [id])
  schoolId      String   @map("school_id")
  school        School   @relation(fields: [schoolId], references: [id])
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by")
  createdByUser User?    @relation("ClassArmTeacherAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy     String?  @map("updated_by")
  updatedByUser User?    @relation("ClassArmTeacherAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([classId, classArmId, schoolId])
  @@index([schoolId, staffId])
}

model StudentScoreAssignment {
  id                              String                         @id @default(cuid())
  studentId                       String                         @map("student_id")
  student                         Student                        @relation(fields: [studentId], references: [id])
  subjectId                       String                         @map("subject_id")
  subject                         Subject                        @relation(fields: [subjectId], references: [id])
  classId                         String                         @map("class_id")
  class                           Class                          @relation(fields: [classId], references: [id])
  classArmId                      String                         @map("class_arm_id")
  classArm                        ClassArm                       @relation(fields: [classArmId], references: [id])
  sessionId                       String                         @map("session_id")
  session                         Session                        @relation("SessionScores", fields: [sessionId], references: [id])
  termDefinitionId                String                         @map("term_definition_id")
  termDefinition                  TermDefinition                 @relation("TermScores", fields: [termDefinitionId], references: [id])
  markingSchemeComponentId        String?                        @map("marking_scheme_component_id")
  markingSchemeComponent          MarkingSchemeComponent?        @relation("ComponentScores", fields: [markingSchemeComponentId], references: [id])
  continuousAssessmentId          String?                        @map("continuous_assessment_id")
  continuousAssessment            ContinuousAssessment?          @relation("AssessmentScores", fields: [continuousAssessmentId], references: [id])
  continuousAssessmentComponentId String?                        @map("continuous_assessment_component_id")
  continuousAssessmentComponent   ContinuousAssessmentComponent? @relation("ComponentScores", fields: [continuousAssessmentComponentId], references: [id])
  score                           Float
  recordedBy                      String                         @map("recorded_by")
  uniqueHash                      String                         @unique @map("unique_hash") @db.VarChar(64)
  schoolId                        String                         @map("school_id")
  school                          School                         @relation(fields: [schoolId], references: [id])
  isDeleted                       Boolean                        @default(false)
  createdAt                       DateTime?                      @default(now()) @map("created_at")
  updatedAt                       DateTime?                      @updatedAt @map("updated_at")
  createdBy                       String?                        @map("created_by")
  createdByUser                   User?                          @relation("StudentScoreAssignmentCreatedBy", fields: [createdBy], references: [id])
  updatedBy                       String?                        @map("updated_by")
  updatedByUser                   User?                          @relation("StudentScoreAssignmentUpdatedBy", fields: [updatedBy], references: [id])

  @@index([schoolId, studentId, sessionId, termDefinitionId])
  @@map("student_score_assignments")
}

model StudentTermRecord {
  id               String            @id @default(cuid())
  studentId        String            @map("student_id")
  student          Student           @relation("StudentTermRecords", fields: [studentId], references: [id])
  classId          String            @map("class_id")
  class            Class             @relation("ClassTermRecords", fields: [classId], references: [id])
  classArmId       String            @map("class_arm_id")
  classArm         ClassArm          @relation("ClassArmTermRecords", fields: [classArmId], references: [id])
  sessionId        String            @map("session_id")
  session          Session           @relation("SessionTermRecords", fields: [sessionId], references: [id])
  termDefinitionId String            @map("term_definition_id")
  termDefinition   TermDefinition    @relation("TermRecords", fields: [termDefinitionId], references: [id])
  schoolId         String            @map("school_id")
  school           School            @relation("SchoolTermRecords", fields: [schoolId], references: [id])
  uniqueHash       String            @unique @map("unique_hash") @db.VarChar(64)
  punctuality      BehavioralRating? @map("punctuality")
  attentiveness    BehavioralRating? @map("attentiveness")
  leadershipSkills BehavioralRating? @map("leadership_skills")
  neatness         BehavioralRating? @map("neatness")
  attendanceTotal  Int?              @map("attendance_total")
  attendancePresent Int?             @map("attendance_present")
  attendanceAbsent Int?              @map("attendance_absent")
  classTeacherComment String?        @map("class_teacher_comment") @db.Text
  principalComment    String?        @map("principal_comment") @db.Text
  recordedBy          String         @map("recorded_by")
  isDeleted           Boolean        @default(false)
  createdAt           DateTime?      @default(now()) @map("created_at")
  updatedAt           DateTime?      @updatedAt @map("updated_at")
  createdBy           String?        @map("created_by")
  createdByUser       User?          @relation("StudentTermRecordCreatedBy", fields: [createdBy], references: [id])
  updatedBy           String?        @map("updated_by")
  updatedByUser       User?          @relation("StudentTermRecordUpdatedBy", fields: [updatedBy], references: [id])

  @@index([schoolId, studentId, sessionId, termDefinitionId])
  @@map("student_term_records")
}

model ResultBatch {
  id                    String                 @id @default(cuid())
  sessionId             String                 @map("session_id")
  session               Session                @relation(fields: [sessionId], references: [id])
  termId                String                 @map("term_id")
  termDefinition        TermDefinition         @relation(fields: [termId], references: [id])
  classId               String                 @map("class_id")
  class                 Class                  @relation(fields: [classId], references: [id])
  classArmId            String                 @map("class_arm_id")
  classArm              ClassArm               @relation(fields: [classArmId], references: [id])
  resultTypeId          String                 @map("result_type_id")
  resultType            MarkingSchemeComponent @relation("BatchResultType", fields: [resultTypeId], references: [id])
  resultScope           AssessmentType
  schoolId              String                 @map("school_id")
  school                School                 @relation(fields: [schoolId], references: [id])
  markingSchemeStructure Json                  @map("marking_scheme_structure")
  title                 String
  description           String?
  isApproved            Boolean                @default(false)
  approvedBy            String?                @map("approved_by")
  approvedByUser        User?                  @relation("ResultBatchApprovedBy", fields: [approvedBy], references: [id])
  approvedAt            DateTime?              @map("approved_at")
  totalStudents         Int                    @map("total_students")
  totalSubjects         Int                    @map("total_subjects")
  classAverage          Float?                 @map("class_average")
  uniqueHash            String                 @unique @map("unique_hash") @db.VarChar(64)
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  createdBy             String                 @map("created_by")
  createdByUser         User?                  @relation("ResultBatchCreatedBy", fields: [createdBy], references: [id])
  updatedBy             String?                @map("updated_by")
  updatedByUser         User?                  @relation("ResultBatchUpdatedBy", fields: [updatedBy], references: [id])
  studentResults        StudentResult[]        @relation("BatchResults")
  @@map("result_batches")
}


model StudentResult {
  id            String      @id @default(cuid())
  resultBatchId String      @map("result_batch_id")
  resultBatch   ResultBatch @relation("BatchResults", fields: [resultBatchId], references: [id])
  studentId     String      @map("student_id")
  student       Student     @relation(fields: [studentId], references: [id])
  subjectId     String      @map("subject_id")
  subject       Subject     @relation(fields: [subjectId], references: [id])
  componentScores Json      @map("component_scores")
  totalScore      Float
  gradeId         String?     @map("grade_id")
  grade           Grade?      @relation(fields: [gradeId], references: [id])
  position        Int?
  teacherComment  String?     @map("teacher_comment")
  schoolId        String      @map("school_id")
  school          School      @relation(fields: [schoolId], references: [id])
  createdBy       String?     @map("created_by")
  createdByUser   User?       @relation("StudentResultCreatedBy", fields: [createdBy], references: [id])

  @@unique([resultBatchId, studentId, subjectId])
  @@map("student_results")
}

model Configuration {
  id                  String    @id @default(cuid())
  logo                Json?     @map("logo")
  country             String?   @map("country")
  state               String?   @map("state")
  color               String?   @map("color")
  schoolHeadName      String?   @map("school_head_name")
  schoolHeadContact   String?   @map("school_head_contact")
  schoolHeadSignature Json?     @map("school_head_signature")
  principalName       String?   @map("principal_name")
  principalContact    String?   @map("principal_contact")
  principalSignature  Json?     @map("principal_signature")
  bursarName          String?   @map("bursar_name")
  bursarContact       String?   @map("bursar_contact")
  bursarSignature     Json?     @map("bursar_signature")
  schoolId            String    @unique @map("school_id")
  school              School    @relation("SchoolConfiguration", fields: [schoolId], references: [id])
  isDeleted           Boolean   @default(false)
  createdAt           DateTime? @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  createdBy           String?   @map("created_by")
  createdByUser       User?     @relation("ConfigurationCreatedBy", fields: [createdBy], references: [id])
  updatedBy           String?   @map("updated_by")
  updatedByUser       User?     @relation("ConfigurationUpdatedBy", fields: [updatedBy], references: [id])

  @@index([schoolId])
  @@map("configurations")
}

model ReportSheetSetting {
  id                  String    @id @default(cuid())
  classId             String    @map("class_id") @db.VarChar(50)
  class               Class     @relation(fields: [classId], references: [id])
  padding             String    @map("padding") @db.VarChar(50)
  headerFont          String    @map("header_font") @db.VarChar(50)
  subjectFont         String    @map("subject_font") @db.VarChar(50)
  valueFont           String    @map("value_font") @db.VarChar(50)
  classTeacherCompute Boolean   @default(false) @map("class_teacher_compute")
  showAge             Boolean   @default(false) @map("show_age")
  showPosition        Boolean   @default(false) @map("show_position")
  showNextFee         Boolean   @default(false) @map("show_next_fee")
  schoolId            String    @map("school_id") @db.VarChar(50)
  school              School    @relation(fields: [schoolId], references: [id])
  isDeleted           Boolean   @default(false)
  createdAt           DateTime? @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  createdBy           String?   @map("created_by")
  createdByUser       User?     @relation("ReportSheetSettingCreatedBy", fields: [createdBy], references: [id])
  updatedBy           String?   @map("updated_by")
  updatedByUser       User?     @relation("ReportSheetSettingUpdatedBy", fields: [updatedBy], references: [id])
}

// Enums
enum Gender {
  male
  female
}

enum AssessmentType {
  CA
  EXAM
}

enum PaymentStatus {
  pending
  success
  failed
}

enum InvoiceStatus {
  submitted
  paid
  overdue
  cancelled
}

enum Role {
  admin
  superAdmin
}

enum AttendanceStatus {
  present
  absent
  late
}

enum PermissionScope {
  platform
  school
}

enum AdmissionStatus {
  pending
  accepted
  rejected
}

enum TermEnum {
  First_Term
  Second_Term
  Third_Term
}

enum BehavioralRating {
  excellent
  very_good
  good
  fair
  poor
}

enum DiscountStatus {
  pending
  approved
  expired
}

enum InvoiceType {
  single
  mass
}
