generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for common user data
model User {
  id              String     @id @default(uuid())
  firstname       String?
  lastname        String?
  othername       String?
  username        String     @unique
  email           String?    @unique
  phone           String?    @unique
  gender          Gender?
  isActive        Boolean    @default(true)
  emailVerifiedAt DateTime?  @map("email_verified_at")
  password        String
  plainPassword   String
  role            Role       @default(admin) // System role: admin or superAdmin
  rememberToken   String?    @map("remember_token")
  avatar          Json?      @map("avatar")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added
  schoolId        String?    @map("school_id")
  school          School?    @relation(fields: [schoolId], references: [id])
  subRoleId       String?    @map("sub_role_id")
  subRole         SubRole?   @relation(fields: [subRoleId], references: [id])
  logEntries      LogEntry[]
  staff           Staff?     @relation("UserToStaff")
  student         Student?   @relation("UserToStudent")
  parent          Parent?    @relation("UserToParent")

  @@map("users")
}

// School model
model School {
  id                 String              @id @default(uuid())
  name               String              @unique
  email              String              @unique
  contact            String              @unique
  isActive           Boolean             @default(true)
  address            String?
  subscriptionId     String?             @map("subscription_id")
  subscription       Subscription?       @relation(fields: [subscriptionId], references: [id])
  createdAt          DateTime            @default(now()) @map("created_at")
  createdBy          String? // Tracks who created the school
  updatedBy          String?
  updatedAt          DateTime            @updatedAt @map("updated_at")
  users              User[]
  subRoles           SubRole[]
  logo               Json?               @map("logo")
  subRolePermissions SubRolePermission[]
  logEntries         LogEntry[]

  @@map("schools")
}

// Staff model for staff-specific data
model Staff {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  user           User      @relation("UserToStaff", fields: [userId], references: [id])
  staffId        String?   @unique @map("staff_id") // School-assigned staff ID
  department     String? // e.g., Mathematics, Administration
  position       String? // e.g., Teacher, Head of Department
  hireDate       DateTime? @map("hire_date")
  qualifications String? // e.g., B.Ed, M.Sc
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@map("staff")
}

// Student model for student-specific data
model Student {
  id            String    @id @default(uuid())
  userId        String    @unique @map("user_id")
  user          User      @relation("UserToStudent", fields: [userId], references: [id])
  studentId     String?   @unique @map("student_id") // School-assigned student ID
  class         String? // e.g., JSS1, SSS2
  admissionDate DateTime? @map("admission_date")
  dateOfBirth   DateTime? @map("date_of_birth")
  parentId      String?   @map("parent_id")
  parent        Parent?   @relation(fields: [parentId], references: [id])
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@map("students")
}

// Parent model for parent-specific data
model Parent {
  id           String    @id @default(uuid())
  userId       String    @unique @map("user_id")
  user         User      @relation("UserToParent", fields: [userId], references: [id])
  occupation   String?
  address      String?
  relationship String? // e.g., Father, Mother, Guardian
  students     Student[] // Links to students they are responsible for
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@map("parents")
}

// Permission model
model Permission {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String
  scope              PermissionScope     @default(school) // platform or school
  subRolePermissions SubRolePermission[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@map("permissions")
}

// SubRole model for global and school-specific subroles
model SubRole {
  id          String              @id @default(uuid())
  name        String
  schoolId    String?             @map("school_id")
  school      School?             @relation(fields: [schoolId], references: [id])
  description String?
  isGlobal    Boolean             @default(false) // Global subroles: Staff, Student, Parent
  permissions SubRolePermission[]
  users       User[]
  scope       PermissionScope     @default(school)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@unique([name, schoolId]) // Unique subrole names per school (null schoolId for global)
  @@map("sub_roles")
}

// SubRolePermission model for linking subroles to permissions
model SubRolePermission {
  id           String     @id @default(uuid())
  subRoleId    String     @map("sub_role_id")
  permissionId String     @map("permission_id")
  schoolId     String?    @map("school_id")
  school       School?    @relation(fields: [schoolId], references: [id])
  subRole      SubRole    @relation(fields: [subRoleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@unique([subRoleId, permissionId, schoolId], name: "subRole_perm_school_unique")
  @@map("sub_role_permissions")
}

// Subscription model for school plans
model Subscription {
  id           String   @id @default(uuid())
  name         String   @unique
  studentLimit Int?     @map("student_limit") // Max students allowed
  duration     Int // Duration in months
  schools      School[]
  isActive     Boolean  @default(true)
  features     Json? // Store plan features (e.g., max users, modules)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdBy      String?   @map("created_by") // Added
 
  updatedBy      String?   @map("updated_by") // Added

  @@map("subscriptions")
}

// LogEntry model for system activity logs
model LogEntry {
  id        String   @id @default(uuid())
  action    String // e.g., "create_user", "update_permission"
  target    String? // e.g., "User", "School"
  targetId  String? // ID of the target entity
  userId    String?  @map("user_id") @db.VarChar(191)
  schoolId  String?  @map("school_id") @db.VarChar(191)
  meta      Json? // Additional details (e.g., changed fields)
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  school    School?  @relation(fields: [schoolId], references: [id])

  @@map("log_entries")
}

// Enums
enum Gender {
  male
  female
}

enum Role {
  admin
  superAdmin
}

enum PermissionScope {
  platform
  school
}
