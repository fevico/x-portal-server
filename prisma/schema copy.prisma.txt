model School {
  id                 String               @id @default(uuid())
  name               String               @unique
  email              String               @unique
  contact            String               @unique
  isActive           Boolean              @default(true)
  isDeleted          Boolean              @default(false)
  address            String?
  subscriptionId     String?              @map("subscription_id")
  subscription       Subscription?        @relation(fields: [subscriptionId], references: [id])
  createdAt          DateTime             @default(now()) @map("created_at")
  createdBy          String?
  updatedBy          String?
  updatedAt          DateTime             @updatedAt @map("updated_at")
  users              User[]
  subRoles           SubRole[]
  logo               Json?                @map("logo")
  subRolePermissions SubRolePermission[]
  logEntries         LogEntry[]
  classes            Class[]
  classArms          ClassArm[]
  subjects           Subject[]
  classClassArms     ClassClassArm[]
  studentSubjects    StudentSubject[]
  classSubjects      ClassSubject[]
  admissions         Admission[]
  sessions           Session[]
  currentSessionId   String?              @map("current_session_id") // Track current session
  currentSession     Session?             @relation("SchoolCurrentSession", fields: [currentSessionId], references: [id])
  currentTermId      String?              @map("current_term_id") // Track current term
  currentTerm        Term?                @relation("SchoolCurrentTerm", fields: [currentTermId], references: [id])
  SessionClassArm    SessionClassArm[]
  SchoolSubscription SchoolSubscription[]

  @@map("schools")
}

model Session {
  id              String            @id @default(uuid())
  name            String // e.g., 2024/2025
  schoolId        String            @map("school_id")
  school          School            @relation(fields: [schoolId], references: [id])
  terms           Term[] // One-to-many relationship with terms
  admissions      Admission[]
  classArms       SessionClassArm[]
  isDeleted       Boolean           @default(false)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  createdBy       String?           @map("created_by")
  updatedBy       String?           @map("updated_by")
  schools         School[]          @relation("SchoolCurrentSession") // Link to School for current session

  @@unique([name, schoolId])
  @@map("sessions")
}

model Term {
  id           String    @id @default(uuid())
  name         String // e.g., First Term, Second Term, Third Term
  startDate    DateTime  @map("start_date")
  endDate      DateTime  @map("end_date")
  sessionId    String    @map("session_id")
  session      Session   @relation(fields: [sessionId], references: [id])
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy    String?   @map("created_by")
  updatedBy    String?   @map("updated_by")
  schools      School[]  @relation("SchoolCurrentTerm") // Link to School for current term

  @@unique([name, sessionId]) // Ensure term names are unique within a session
  @@map("terms")
}

model Admission {
  id                  String    @id @default(uuid())
  sessionId           String    @map("session_id")
  session             Session   @relation(fields: [sessionId], references: [id])
  schoolId            String    @map("school_id")
  school              School    @relation(fields: [schoolId], references: [id])
  studentId           String    @unique @map("student_id")
  student             Student   @relation("StudentToAdmission", fields: [studentId], references: [id])
  parentId            String?   @map("parent_id")
  parent              Parent?   @relation(fields: [parentId], references: [id])
  presentClassId      String?   @map("present_class_id")
  presentClass        Class?    @relation("AdmissionToPresentClass", fields: [presentClassId], references: [id])
  classApplyingForId  String?   @map("class_applying_for_id")
  classApplyingFor    Class?    @relation("AdmissionToClassApplyingFor", fields: [classApplyingForId], references: [id])
  classId             String?   @map("class_id")
  class               Class?    @relation("AdmissionToAssignedClass", fields: [classId], references: [id])
  classArmId          String?   @map("class_arm_id")
  classArm            ClassArm? @relation(fields: [classArmId], references: [id])
  homeAddress         String?   @map("home_address")
  contact             String?
  email               String?
  dateOfBirth         DateTime? @map("date_of_birth")
  religion            String?
  nationality         String?
  stateOfOrigin       String?   @map("state_of_origin")
  lga                 String?
  parentLastname      String?   @map("parent_lastname")
  parentFirstname     String?   @map("parent_firstname")
  parentOthername     String?   @map("parent_othername")
  parentAddress       String?   @map("parent_address")
  parentContact       String?   @map("parent_contact")
  parentEmail         String?   @map("parent_email")
  parentRelationship  String?   @map("parent_relationship")
  formerSchoolName    String?   @map("former_school_name")
  formerSchoolAddress String?   @map("former_school_address")
  formerSchoolContact String?   @map("former_school_contact")
  healthProblems      String?   @map("health_problems")
  howHeardAboutUs     String?   @map("how_heard_about_us")
  isAdmitted          Boolean   @default(false)
  rejectionReason     String?   @map("rejection_reason")
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  createdBy           String?   @map("created_by")
  updatedBy           String?   @map("updated_by")

  @@map("admissions")
}